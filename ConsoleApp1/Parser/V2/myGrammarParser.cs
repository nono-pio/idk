//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from myGrammar.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class myGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, WS=2, DIGIT=3, CHAR=4, CARET=5, COMMA=6, UNDERSCORE=7, FRAC_CMD=8, 
		SQRT_CMD=9, DERIVATIVE=10, ADD=11, SUB=12, MUL=13, CDOT=14, TIMES=15, 
		DIV=16, L_PAREN=17, R_PAREN=18, L_BRACE=19, R_BRACE=20, L_BRACKET=21, 
		R_BRACKET=22, BAR=23, L_FLOOR=24, R_FLOOR=25, L_CEIL=26, R_CEIL=27, FAC=28, 
		FUNC_NAME=29, FUNC_NAME_LATEX=30, LATEX_CMD=31;
	public const int
		RULE_program = 0, RULE_expr = 1, RULE_addition = 2, RULE_multiplication = 3, 
		RULE_unary = 4, RULE_unarysufix = 5, RULE_suffix = 6, RULE_power = 7, 
		RULE_power_nofunc = 8, RULE_atom = 9, RULE_atom_nofunc = 10, RULE_function = 11, 
		RULE_func_args = 12, RULE_abs = 13, RULE_intfunc = 14, RULE_frac = 15, 
		RULE_sqrt = 16, RULE_subexpr = 17, RULE_supexpr = 18, RULE_parenthesis = 19, 
		RULE_number = 20, RULE_variable = 21, RULE_letter = 22, RULE_mul = 23;
	public static readonly string[] ruleNames = {
		"program", "expr", "addition", "multiplication", "unary", "unarysufix", 
		"suffix", "power", "power_nofunc", "atom", "atom_nofunc", "function", 
		"func_args", "abs", "intfunc", "frac", "sqrt", "subexpr", "supexpr", "parenthesis", 
		"number", "variable", "letter", "mul"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", null, null, null, "'^'", "','", "'_'", "'\\frac'", "'\\sqrt'", 
		"'''", "'+'", "'-'", "'*'", "'\\cdot'", "'\\times'", "'/'", null, null, 
		"'{'", "'}'", "'['", "']'", "'|'", "'\\lfloor'", "'\\rfloor'", "'\\lceil'", 
		"'\\rceil'", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "WS", "DIGIT", "CHAR", "CARET", "COMMA", "UNDERSCORE", "FRAC_CMD", 
		"SQRT_CMD", "DERIVATIVE", "ADD", "SUB", "MUL", "CDOT", "TIMES", "DIV", 
		"L_PAREN", "R_PAREN", "L_BRACE", "R_BRACE", "L_BRACKET", "R_BRACKET", 
		"BAR", "L_FLOOR", "R_FLOOR", "L_CEIL", "R_CEIL", "FAC", "FUNC_NAME", "FUNC_NAME_LATEX", 
		"LATEX_CMD"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "myGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static myGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public myGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public myGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(myGrammarParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			expr();
			State = 49;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditionContext addition() {
			return GetRuleContext<AdditionContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 2, RULE_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			addition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicationContext[] multiplication() {
			return GetRuleContexts<MultiplicationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicationContext multiplication(int i) {
			return GetRuleContext<MultiplicationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ADD() { return GetTokens(myGrammarParser.ADD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD(int i) {
			return GetToken(myGrammarParser.ADD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SUB() { return GetTokens(myGrammarParser.SUB); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB(int i) {
			return GetToken(myGrammarParser.SUB, i);
		}
		public AdditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.EnterAddition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.ExitAddition(this);
		}
	}

	[RuleVersion(0)]
	public AdditionContext addition() {
		AdditionContext _localctx = new AdditionContext(Context, State);
		EnterRule(_localctx, 4, RULE_addition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			multiplication();
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ADD || _la==SUB) {
				{
				{
				State = 54;
				_la = TokenStream.LA(1);
				if ( !(_la==ADD || _la==SUB) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 55;
				multiplication();
				}
				}
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext[] unary() {
			return GetRuleContexts<UnaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext unary(int i) {
			return GetRuleContext<UnaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulContext[] mul() {
			return GetRuleContexts<MulContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulContext mul(int i) {
			return GetRuleContext<MulContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(myGrammarParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(myGrammarParser.DIV, i);
		}
		public MultiplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.EnterMultiplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.ExitMultiplication(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicationContext multiplication() {
		MultiplicationContext _localctx = new MultiplicationContext(Context, State);
		EnterRule(_localctx, 6, RULE_multiplication);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			unary();
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 122880L) != 0)) {
				{
				{
				State = 64;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MUL:
				case CDOT:
				case TIMES:
					{
					State = 62;
					mul();
					}
					break;
				case DIV:
					{
					State = 63;
					Match(DIV);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 66;
				unary();
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(myGrammarParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnarysufixContext[] unarysufix() {
			return GetRuleContexts<UnarysufixContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnarysufixContext unarysufix(int i) {
			return GetRuleContext<UnarysufixContext>(i);
		}
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.EnterUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.ExitUnary(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(Context, State);
		EnterRule(_localctx, 8, RULE_unary);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUB) {
				{
				State = 72;
				Match(SUB);
				}
			}

			State = 76;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 75;
					unarysufix();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 78;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnarysufixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PowerContext power() {
			return GetRuleContext<PowerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuffixContext[] suffix() {
			return GetRuleContexts<SuffixContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuffixContext suffix(int i) {
			return GetRuleContext<SuffixContext>(i);
		}
		public UnarysufixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unarysufix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.EnterUnarysufix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.ExitUnarysufix(this);
		}
	}

	[RuleVersion(0)]
	public UnarysufixContext unarysufix() {
		UnarysufixContext _localctx = new UnarysufixContext(Context, State);
		EnterRule(_localctx, 10, RULE_unarysufix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			power();
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FAC) {
				{
				{
				State = 81;
				suffix();
				}
				}
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAC() { return GetToken(myGrammarParser.FAC, 0); }
		public SuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_suffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.EnterSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.ExitSuffix(this);
		}
	}

	[RuleVersion(0)]
	public SuffixContext suffix() {
		SuffixContext _localctx = new SuffixContext(Context, State);
		EnterRule(_localctx, 12, RULE_suffix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(FAC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext[] atom() {
			return GetRuleContexts<AtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CARET() { return GetTokens(myGrammarParser.CARET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET(int i) {
			return GetToken(myGrammarParser.CARET, i);
		}
		public PowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.EnterPower(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.ExitPower(this);
		}
	}

	[RuleVersion(0)]
	public PowerContext power() {
		PowerContext _localctx = new PowerContext(Context, State);
		EnterRule(_localctx, 14, RULE_power);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			atom();
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CARET) {
				{
				{
				State = 90;
				Match(CARET);
				State = 91;
				atom();
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Power_nofuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Atom_nofuncContext[] atom_nofunc() {
			return GetRuleContexts<Atom_nofuncContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Atom_nofuncContext atom_nofunc(int i) {
			return GetRuleContext<Atom_nofuncContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CARET() { return GetTokens(myGrammarParser.CARET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET(int i) {
			return GetToken(myGrammarParser.CARET, i);
		}
		public Power_nofuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power_nofunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.EnterPower_nofunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.ExitPower_nofunc(this);
		}
	}

	[RuleVersion(0)]
	public Power_nofuncContext power_nofunc() {
		Power_nofuncContext _localctx = new Power_nofuncContext(Context, State);
		EnterRule(_localctx, 16, RULE_power_nofunc);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			atom_nofunc();
			State = 102;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 98;
					Match(CARET);
					State = 99;
					atom_nofunc();
					}
					} 
				}
				State = 104;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisContext parenthesis() {
			return GetRuleContext<ParenthesisContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbsContext abs() {
			return GetRuleContext<AbsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntfuncContext intfunc() {
			return GetRuleContext<IntfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FracContext frac() {
			return GetRuleContext<FracContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqrtContext sqrt() {
			return GetRuleContext<SqrtContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 18, RULE_atom);
		try {
			State = 113;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 105;
				parenthesis();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 106;
				number();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 107;
				function();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 108;
				variable();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 109;
				abs();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 110;
				intfunc();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 111;
				frac();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 112;
				sqrt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atom_nofuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisContext parenthesis() {
			return GetRuleContext<ParenthesisContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbsContext abs() {
			return GetRuleContext<AbsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntfuncContext intfunc() {
			return GetRuleContext<IntfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FracContext frac() {
			return GetRuleContext<FracContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqrtContext sqrt() {
			return GetRuleContext<SqrtContext>(0);
		}
		public Atom_nofuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom_nofunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.EnterAtom_nofunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.ExitAtom_nofunc(this);
		}
	}

	[RuleVersion(0)]
	public Atom_nofuncContext atom_nofunc() {
		Atom_nofuncContext _localctx = new Atom_nofuncContext(Context, State);
		EnterRule(_localctx, 20, RULE_atom_nofunc);
		try {
			State = 122;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case L_PAREN:
			case L_BRACE:
			case L_BRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 115;
				parenthesis();
				}
				break;
			case DIGIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 116;
				number();
				}
				break;
			case CHAR:
			case LATEX_CMD:
				EnterOuterAlt(_localctx, 3);
				{
				State = 117;
				variable();
				}
				break;
			case BAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 118;
				abs();
				}
				break;
			case L_FLOOR:
			case L_CEIL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 119;
				intfunc();
				}
				break;
			case FRAC_CMD:
				EnterOuterAlt(_localctx, 6);
				{
				State = 120;
				frac();
				}
				break;
			case SQRT_CMD:
				EnterOuterAlt(_localctx, 7);
				{
				State = 121;
				sqrt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC_NAME() { return GetToken(myGrammarParser.FUNC_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_argsContext func_args() {
			return GetRuleContext<Func_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Power_nofuncContext power_nofunc() {
			return GetRuleContext<Power_nofuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubexprContext subexpr() {
			return GetRuleContext<SubexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SupexprContext supexpr() {
			return GetRuleContext<SupexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DERIVATIVE() { return GetTokens(myGrammarParser.DERIVATIVE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DERIVATIVE(int i) {
			return GetToken(myGrammarParser.DERIVATIVE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetterContext letter() {
			return GetRuleContext<LetterContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 22, RULE_function);
		int _la;
		try {
			State = 156;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FUNC_NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 124;
				Match(FUNC_NAME);
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNDERSCORE) {
					{
					State = 125;
					subexpr();
					}
				}

				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CARET) {
					{
					State = 128;
					supexpr();
					}
				}

				State = 134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DERIVATIVE) {
					{
					{
					State = 131;
					Match(DERIVATIVE);
					}
					}
					State = 136;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 139;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 137;
					func_args();
					}
					break;
				case 2:
					{
					State = 138;
					power_nofunc();
					}
					break;
				}
				}
				break;
			case CHAR:
			case LATEX_CMD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 141;
				letter();
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNDERSCORE) {
					{
					State = 142;
					subexpr();
					}
				}

				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CARET) {
					{
					State = 145;
					supexpr();
					}
				}

				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DERIVATIVE) {
					{
					{
					State = 148;
					Match(DERIVATIVE);
					}
					}
					State = 153;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 154;
				func_args();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(myGrammarParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(myGrammarParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(myGrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(myGrammarParser.COMMA, i);
		}
		public Func_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.EnterFunc_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.ExitFunc_args(this);
		}
	}

	[RuleVersion(0)]
	public Func_argsContext func_args() {
		Func_argsContext _localctx = new Func_argsContext(Context, State);
		EnterRule(_localctx, 24, RULE_func_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			Match(L_PAREN);
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2779386648L) != 0)) {
				{
				State = 159;
				expr();
				}
			}

			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 162;
				Match(COMMA);
				State = 163;
				expr();
				}
				}
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 169;
			Match(R_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BAR() { return GetTokens(myGrammarParser.BAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BAR(int i) {
			return GetToken(myGrammarParser.BAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AbsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.EnterAbs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.ExitAbs(this);
		}
	}

	[RuleVersion(0)]
	public AbsContext abs() {
		AbsContext _localctx = new AbsContext(Context, State);
		EnterRule(_localctx, 26, RULE_abs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			Match(BAR);
			State = 172;
			expr();
			State = 173;
			Match(BAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_FLOOR() { return GetToken(myGrammarParser.L_FLOOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CEIL() { return GetToken(myGrammarParser.L_CEIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_FLOOR() { return GetToken(myGrammarParser.R_FLOOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CEIL() { return GetToken(myGrammarParser.R_CEIL, 0); }
		public IntfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.EnterIntfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.ExitIntfunc(this);
		}
	}

	[RuleVersion(0)]
	public IntfuncContext intfunc() {
		IntfuncContext _localctx = new IntfuncContext(Context, State);
		EnterRule(_localctx, 28, RULE_intfunc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			_la = TokenStream.LA(1);
			if ( !(_la==L_FLOOR || _la==L_CEIL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 176;
			expr();
			State = 177;
			_la = TokenStream.LA(1);
			if ( !(_la==R_FLOOR || _la==R_CEIL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FracContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FRAC_CMD() { return GetToken(myGrammarParser.FRAC_CMD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] L_BRACE() { return GetTokens(myGrammarParser.L_BRACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACE(int i) {
			return GetToken(myGrammarParser.L_BRACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] R_BRACE() { return GetTokens(myGrammarParser.R_BRACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACE(int i) {
			return GetToken(myGrammarParser.R_BRACE, i);
		}
		public FracContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frac; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.EnterFrac(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.ExitFrac(this);
		}
	}

	[RuleVersion(0)]
	public FracContext frac() {
		FracContext _localctx = new FracContext(Context, State);
		EnterRule(_localctx, 30, RULE_frac);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(FRAC_CMD);
			State = 180;
			Match(L_BRACE);
			State = 181;
			expr();
			State = 182;
			Match(R_BRACE);
			State = 183;
			Match(L_BRACE);
			State = 184;
			expr();
			State = 185;
			Match(R_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqrtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQRT_CMD() { return GetToken(myGrammarParser.SQRT_CMD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACE() { return GetToken(myGrammarParser.L_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACE() { return GetToken(myGrammarParser.R_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(myGrammarParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(myGrammarParser.R_BRACKET, 0); }
		public SqrtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqrt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.EnterSqrt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.ExitSqrt(this);
		}
	}

	[RuleVersion(0)]
	public SqrtContext sqrt() {
		SqrtContext _localctx = new SqrtContext(Context, State);
		EnterRule(_localctx, 32, RULE_sqrt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			Match(SQRT_CMD);
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==L_BRACKET) {
				{
				State = 188;
				Match(L_BRACKET);
				State = 189;
				expr();
				State = 190;
				Match(R_BRACKET);
				}
			}

			State = 194;
			Match(L_BRACE);
			State = 195;
			expr();
			State = 196;
			Match(R_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE() { return GetToken(myGrammarParser.UNDERSCORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACE() { return GetToken(myGrammarParser.L_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACE() { return GetToken(myGrammarParser.R_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public SubexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.EnterSubexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.ExitSubexpr(this);
		}
	}

	[RuleVersion(0)]
	public SubexprContext subexpr() {
		SubexprContext _localctx = new SubexprContext(Context, State);
		EnterRule(_localctx, 34, RULE_subexpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			Match(UNDERSCORE);
			State = 204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 199;
				Match(L_BRACE);
				State = 200;
				expr();
				State = 201;
				Match(R_BRACE);
				}
				break;
			case 2:
				{
				State = 203;
				atom();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SupexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(myGrammarParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACE() { return GetToken(myGrammarParser.L_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACE() { return GetToken(myGrammarParser.R_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public SupexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_supexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.EnterSupexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.ExitSupexpr(this);
		}
	}

	[RuleVersion(0)]
	public SupexprContext supexpr() {
		SupexprContext _localctx = new SupexprContext(Context, State);
		EnterRule(_localctx, 36, RULE_supexpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			Match(CARET);
			State = 212;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 207;
				Match(L_BRACE);
				State = 208;
				expr();
				State = 209;
				Match(R_BRACE);
				}
				break;
			case 2:
				{
				State = 211;
				atom();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesisContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(myGrammarParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(myGrammarParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACE() { return GetToken(myGrammarParser.L_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACE() { return GetToken(myGrammarParser.R_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(myGrammarParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(myGrammarParser.R_BRACKET, 0); }
		public ParenthesisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesis; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.EnterParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.ExitParenthesis(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesisContext parenthesis() {
		ParenthesisContext _localctx = new ParenthesisContext(Context, State);
		EnterRule(_localctx, 38, RULE_parenthesis);
		try {
			State = 226;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case L_PAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 214;
				Match(L_PAREN);
				State = 215;
				expr();
				State = 216;
				Match(R_PAREN);
				}
				break;
			case L_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 218;
				Match(L_BRACE);
				State = 219;
				expr();
				State = 220;
				Match(R_BRACE);
				}
				break;
			case L_BRACKET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 222;
				Match(L_BRACKET);
				State = 223;
				expr();
				State = 224;
				Match(R_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(myGrammarParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(myGrammarParser.DIGIT, i);
		}
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 40, RULE_number);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 228;
					Match(DIGIT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 231;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 233;
				Match(T__0);
				State = 237;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 234;
						Match(DIGIT);
						}
						} 
					}
					State = 239;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LetterContext letter() {
			return GetRuleContext<LetterContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 42, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			letter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(myGrammarParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATEX_CMD() { return GetToken(myGrammarParser.LATEX_CMD, 0); }
		public LetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.EnterLetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.ExitLetter(this);
		}
	}

	[RuleVersion(0)]
	public LetterContext letter() {
		LetterContext _localctx = new LetterContext(Context, State);
		EnterRule(_localctx, 44, RULE_letter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			_la = TokenStream.LA(1);
			if ( !(_la==CHAR || _la==LATEX_CMD) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(myGrammarParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CDOT() { return GetToken(myGrammarParser.CDOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(myGrammarParser.TIMES, 0); }
		public MulContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mul; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.EnterMul(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ImyGrammarListener typedListener = listener as ImyGrammarListener;
			if (typedListener != null) typedListener.ExitMul(this);
		}
	}

	[RuleVersion(0)]
	public MulContext mul() {
		MulContext _localctx = new MulContext(Context, State);
		EnterRule(_localctx, 46, RULE_mul);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 57344L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,31,249,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,5,2,57,8,2,10,2,12,
		2,60,9,2,1,3,1,3,1,3,3,3,65,8,3,1,3,5,3,68,8,3,10,3,12,3,71,9,3,1,4,3,
		4,74,8,4,1,4,4,4,77,8,4,11,4,12,4,78,1,5,1,5,5,5,83,8,5,10,5,12,5,86,9,
		5,1,6,1,6,1,7,1,7,1,7,5,7,93,8,7,10,7,12,7,96,9,7,1,8,1,8,1,8,5,8,101,
		8,8,10,8,12,8,104,9,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,114,8,9,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,3,10,123,8,10,1,11,1,11,3,11,127,8,11,1,
		11,3,11,130,8,11,1,11,5,11,133,8,11,10,11,12,11,136,9,11,1,11,1,11,3,11,
		140,8,11,1,11,1,11,3,11,144,8,11,1,11,3,11,147,8,11,1,11,5,11,150,8,11,
		10,11,12,11,153,9,11,1,11,1,11,3,11,157,8,11,1,12,1,12,3,12,161,8,12,1,
		12,1,12,5,12,165,8,12,10,12,12,12,168,9,12,1,12,1,12,1,13,1,13,1,13,1,
		13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,
		16,1,16,1,16,1,16,3,16,193,8,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,
		1,17,1,17,3,17,205,8,17,1,18,1,18,1,18,1,18,1,18,1,18,3,18,213,8,18,1,
		19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,227,8,19,
		1,20,4,20,230,8,20,11,20,12,20,231,1,20,1,20,5,20,236,8,20,10,20,12,20,
		239,9,20,3,20,241,8,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,0,0,24,0,2,4,
		6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,0,5,1,0,11,
		12,2,0,24,24,26,26,2,0,25,25,27,27,2,0,4,4,31,31,1,0,13,15,263,0,48,1,
		0,0,0,2,51,1,0,0,0,4,53,1,0,0,0,6,61,1,0,0,0,8,73,1,0,0,0,10,80,1,0,0,
		0,12,87,1,0,0,0,14,89,1,0,0,0,16,97,1,0,0,0,18,113,1,0,0,0,20,122,1,0,
		0,0,22,156,1,0,0,0,24,158,1,0,0,0,26,171,1,0,0,0,28,175,1,0,0,0,30,179,
		1,0,0,0,32,187,1,0,0,0,34,198,1,0,0,0,36,206,1,0,0,0,38,226,1,0,0,0,40,
		229,1,0,0,0,42,242,1,0,0,0,44,244,1,0,0,0,46,246,1,0,0,0,48,49,3,2,1,0,
		49,50,5,0,0,1,50,1,1,0,0,0,51,52,3,4,2,0,52,3,1,0,0,0,53,58,3,6,3,0,54,
		55,7,0,0,0,55,57,3,6,3,0,56,54,1,0,0,0,57,60,1,0,0,0,58,56,1,0,0,0,58,
		59,1,0,0,0,59,5,1,0,0,0,60,58,1,0,0,0,61,69,3,8,4,0,62,65,3,46,23,0,63,
		65,5,16,0,0,64,62,1,0,0,0,64,63,1,0,0,0,65,66,1,0,0,0,66,68,3,8,4,0,67,
		64,1,0,0,0,68,71,1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,7,1,0,0,0,71,69,
		1,0,0,0,72,74,5,12,0,0,73,72,1,0,0,0,73,74,1,0,0,0,74,76,1,0,0,0,75,77,
		3,10,5,0,76,75,1,0,0,0,77,78,1,0,0,0,78,76,1,0,0,0,78,79,1,0,0,0,79,9,
		1,0,0,0,80,84,3,14,7,0,81,83,3,12,6,0,82,81,1,0,0,0,83,86,1,0,0,0,84,82,
		1,0,0,0,84,85,1,0,0,0,85,11,1,0,0,0,86,84,1,0,0,0,87,88,5,28,0,0,88,13,
		1,0,0,0,89,94,3,18,9,0,90,91,5,5,0,0,91,93,3,18,9,0,92,90,1,0,0,0,93,96,
		1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,15,1,0,0,0,96,94,1,0,0,0,97,102,
		3,20,10,0,98,99,5,5,0,0,99,101,3,20,10,0,100,98,1,0,0,0,101,104,1,0,0,
		0,102,100,1,0,0,0,102,103,1,0,0,0,103,17,1,0,0,0,104,102,1,0,0,0,105,114,
		3,38,19,0,106,114,3,40,20,0,107,114,3,22,11,0,108,114,3,42,21,0,109,114,
		3,26,13,0,110,114,3,28,14,0,111,114,3,30,15,0,112,114,3,32,16,0,113,105,
		1,0,0,0,113,106,1,0,0,0,113,107,1,0,0,0,113,108,1,0,0,0,113,109,1,0,0,
		0,113,110,1,0,0,0,113,111,1,0,0,0,113,112,1,0,0,0,114,19,1,0,0,0,115,123,
		3,38,19,0,116,123,3,40,20,0,117,123,3,42,21,0,118,123,3,26,13,0,119,123,
		3,28,14,0,120,123,3,30,15,0,121,123,3,32,16,0,122,115,1,0,0,0,122,116,
		1,0,0,0,122,117,1,0,0,0,122,118,1,0,0,0,122,119,1,0,0,0,122,120,1,0,0,
		0,122,121,1,0,0,0,123,21,1,0,0,0,124,126,5,29,0,0,125,127,3,34,17,0,126,
		125,1,0,0,0,126,127,1,0,0,0,127,129,1,0,0,0,128,130,3,36,18,0,129,128,
		1,0,0,0,129,130,1,0,0,0,130,134,1,0,0,0,131,133,5,10,0,0,132,131,1,0,0,
		0,133,136,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,139,1,0,0,0,136,
		134,1,0,0,0,137,140,3,24,12,0,138,140,3,16,8,0,139,137,1,0,0,0,139,138,
		1,0,0,0,140,157,1,0,0,0,141,143,3,44,22,0,142,144,3,34,17,0,143,142,1,
		0,0,0,143,144,1,0,0,0,144,146,1,0,0,0,145,147,3,36,18,0,146,145,1,0,0,
		0,146,147,1,0,0,0,147,151,1,0,0,0,148,150,5,10,0,0,149,148,1,0,0,0,150,
		153,1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,154,1,0,0,0,153,151,1,
		0,0,0,154,155,3,24,12,0,155,157,1,0,0,0,156,124,1,0,0,0,156,141,1,0,0,
		0,157,23,1,0,0,0,158,160,5,17,0,0,159,161,3,2,1,0,160,159,1,0,0,0,160,
		161,1,0,0,0,161,166,1,0,0,0,162,163,5,6,0,0,163,165,3,2,1,0,164,162,1,
		0,0,0,165,168,1,0,0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,169,1,0,0,0,
		168,166,1,0,0,0,169,170,5,18,0,0,170,25,1,0,0,0,171,172,5,23,0,0,172,173,
		3,2,1,0,173,174,5,23,0,0,174,27,1,0,0,0,175,176,7,1,0,0,176,177,3,2,1,
		0,177,178,7,2,0,0,178,29,1,0,0,0,179,180,5,8,0,0,180,181,5,19,0,0,181,
		182,3,2,1,0,182,183,5,20,0,0,183,184,5,19,0,0,184,185,3,2,1,0,185,186,
		5,20,0,0,186,31,1,0,0,0,187,192,5,9,0,0,188,189,5,21,0,0,189,190,3,2,1,
		0,190,191,5,22,0,0,191,193,1,0,0,0,192,188,1,0,0,0,192,193,1,0,0,0,193,
		194,1,0,0,0,194,195,5,19,0,0,195,196,3,2,1,0,196,197,5,20,0,0,197,33,1,
		0,0,0,198,204,5,7,0,0,199,200,5,19,0,0,200,201,3,2,1,0,201,202,5,20,0,
		0,202,205,1,0,0,0,203,205,3,18,9,0,204,199,1,0,0,0,204,203,1,0,0,0,205,
		35,1,0,0,0,206,212,5,5,0,0,207,208,5,19,0,0,208,209,3,2,1,0,209,210,5,
		20,0,0,210,213,1,0,0,0,211,213,3,18,9,0,212,207,1,0,0,0,212,211,1,0,0,
		0,213,37,1,0,0,0,214,215,5,17,0,0,215,216,3,2,1,0,216,217,5,18,0,0,217,
		227,1,0,0,0,218,219,5,19,0,0,219,220,3,2,1,0,220,221,5,20,0,0,221,227,
		1,0,0,0,222,223,5,21,0,0,223,224,3,2,1,0,224,225,5,22,0,0,225,227,1,0,
		0,0,226,214,1,0,0,0,226,218,1,0,0,0,226,222,1,0,0,0,227,39,1,0,0,0,228,
		230,5,3,0,0,229,228,1,0,0,0,230,231,1,0,0,0,231,229,1,0,0,0,231,232,1,
		0,0,0,232,240,1,0,0,0,233,237,5,1,0,0,234,236,5,3,0,0,235,234,1,0,0,0,
		236,239,1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,241,1,0,0,0,239,237,
		1,0,0,0,240,233,1,0,0,0,240,241,1,0,0,0,241,41,1,0,0,0,242,243,3,44,22,
		0,243,43,1,0,0,0,244,245,7,3,0,0,245,45,1,0,0,0,246,247,7,4,0,0,247,47,
		1,0,0,0,27,58,64,69,73,78,84,94,102,113,122,126,129,134,139,143,146,151,
		156,160,166,192,204,212,226,231,237,240
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
