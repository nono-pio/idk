//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Latex.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LatexLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, UNION=2, INTERSECTION=3, N_SET=4, Z_SET=5, Q_SET=6, R_SET=7, EMPTY_SET=8, 
		OR=9, AND=10, NOT=11, TRUE=12, FALSE=13, REL_SIGN=14, IN=15, WS=16, DIGIT=17, 
		CHAR=18, CARET=19, COMMA=20, UNDERSCORE=21, FRAC_CMD=22, SQRT_CMD=23, 
		DERIVATIVE=24, ADD=25, SUB=26, MUL=27, CDOT=28, TIMES=29, DIV=30, L_PAREN=31, 
		R_PAREN=32, L_BRACE=33, R_BRACE=34, L_BRACE_SET=35, R_BRACE_SET=36, L_BRACKET=37, 
		R_BRACKET=38, BAR=39, L_FLOOR=40, R_FLOOR=41, L_CEIL=42, R_CEIL=43, FAC=44, 
		FUNC_NAME=45, FUNC_NAME_LATEX=46, INFTY=47, LATEX_CMD=48;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "UNION", "INTERSECTION", "N_SET", "Z_SET", "Q_SET", "R_SET", "EMPTY_SET", 
		"OR", "AND", "NOT", "TRUE", "FALSE", "REL_SIGN", "IN", "WS", "DIGIT", 
		"CHAR", "CARET", "COMMA", "UNDERSCORE", "FRAC_CMD", "SQRT_CMD", "DERIVATIVE", 
		"ADD", "SUB", "MUL", "CDOT", "TIMES", "DIV", "L_PAREN", "R_PAREN", "L_BRACE", 
		"R_BRACE", "L_BRACE_SET", "R_BRACE_SET", "L_BRACKET", "R_BRACKET", "BAR", 
		"L_FLOOR", "R_FLOOR", "L_CEIL", "R_CEIL", "FAC", "FUNC_NAME", "FUNC_NAME_LATEX", 
		"INFTY", "LATEX_CMD"
	};


	public LatexLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LatexLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'.'", "'\\cup'", "'\\cap'", "'\\N'", "'\\Z'", "'\\Q'", "'\\R'", 
		"'\\empty'", null, null, "'\\neg'", null, null, null, "'\\in'", null, 
		null, null, "'^'", "','", "'_'", "'\\frac'", "'\\sqrt'", "'''", "'+'", 
		"'-'", "'*'", "'\\cdot'", "'\\times'", "'/'", null, null, "'{'", "'}'", 
		"'\\left{'", "'\\right}'", "'['", "']'", "'|'", "'\\lfloor'", "'\\rfloor'", 
		"'\\lceil'", "'\\rceil'", "'!'", null, null, "'\\infty'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "UNION", "INTERSECTION", "N_SET", "Z_SET", "Q_SET", "R_SET", 
		"EMPTY_SET", "OR", "AND", "NOT", "TRUE", "FALSE", "REL_SIGN", "IN", "WS", 
		"DIGIT", "CHAR", "CARET", "COMMA", "UNDERSCORE", "FRAC_CMD", "SQRT_CMD", 
		"DERIVATIVE", "ADD", "SUB", "MUL", "CDOT", "TIMES", "DIV", "L_PAREN", 
		"R_PAREN", "L_BRACE", "R_BRACE", "L_BRACE_SET", "R_BRACE_SET", "L_BRACKET", 
		"R_BRACKET", "BAR", "L_FLOOR", "R_FLOOR", "L_CEIL", "R_CEIL", "FAC", "FUNC_NAME", 
		"FUNC_NAME_LATEX", "INFTY", "LATEX_CMD"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Latex.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LatexLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,48,405,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,1,0,1,0,1,1,1,1,
		1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,
		6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,3,8,141,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,1,9,1,9,1,9,3,9,159,8,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,1,11,3,11,174,8,11,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,3,12,185,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,
		13,209,8,13,1,14,1,14,1,14,1,14,1,15,4,15,216,8,15,11,15,12,15,217,1,15,
		1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,
		1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,
		1,25,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,
		1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,274,8,30,1,
		31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,284,8,31,1,32,1,32,1,33,1,33,
		1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
		1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
		1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,
		1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,44,1,44,1,44,
		1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
		1,44,1,44,1,44,3,44,363,8,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
		45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
		45,1,45,1,45,1,45,3,45,391,8,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,
		1,47,4,47,402,8,47,11,47,12,47,403,0,0,48,1,1,3,2,5,3,7,4,9,5,11,6,13,
		7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
		39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
		63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,
		87,44,89,45,91,46,93,47,95,48,1,0,3,3,0,9,10,13,13,32,32,1,0,48,57,2,0,
		65,90,97,122,436,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
		0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
		0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
		1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
		0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
		1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
		0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
		1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,
		0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,1,97,
		1,0,0,0,3,99,1,0,0,0,5,104,1,0,0,0,7,109,1,0,0,0,9,112,1,0,0,0,11,115,
		1,0,0,0,13,118,1,0,0,0,15,121,1,0,0,0,17,140,1,0,0,0,19,158,1,0,0,0,21,
		160,1,0,0,0,23,173,1,0,0,0,25,184,1,0,0,0,27,208,1,0,0,0,29,210,1,0,0,
		0,31,215,1,0,0,0,33,221,1,0,0,0,35,223,1,0,0,0,37,225,1,0,0,0,39,227,1,
		0,0,0,41,229,1,0,0,0,43,231,1,0,0,0,45,237,1,0,0,0,47,243,1,0,0,0,49,245,
		1,0,0,0,51,247,1,0,0,0,53,249,1,0,0,0,55,251,1,0,0,0,57,257,1,0,0,0,59,
		264,1,0,0,0,61,273,1,0,0,0,63,283,1,0,0,0,65,285,1,0,0,0,67,287,1,0,0,
		0,69,289,1,0,0,0,71,296,1,0,0,0,73,304,1,0,0,0,75,306,1,0,0,0,77,308,1,
		0,0,0,79,310,1,0,0,0,81,318,1,0,0,0,83,326,1,0,0,0,85,333,1,0,0,0,87,340,
		1,0,0,0,89,362,1,0,0,0,91,390,1,0,0,0,93,392,1,0,0,0,95,399,1,0,0,0,97,
		98,5,46,0,0,98,2,1,0,0,0,99,100,5,92,0,0,100,101,5,99,0,0,101,102,5,117,
		0,0,102,103,5,112,0,0,103,4,1,0,0,0,104,105,5,92,0,0,105,106,5,99,0,0,
		106,107,5,97,0,0,107,108,5,112,0,0,108,6,1,0,0,0,109,110,5,92,0,0,110,
		111,5,78,0,0,111,8,1,0,0,0,112,113,5,92,0,0,113,114,5,90,0,0,114,10,1,
		0,0,0,115,116,5,92,0,0,116,117,5,81,0,0,117,12,1,0,0,0,118,119,5,92,0,
		0,119,120,5,82,0,0,120,14,1,0,0,0,121,122,5,92,0,0,122,123,5,101,0,0,123,
		124,5,109,0,0,124,125,5,112,0,0,125,126,5,116,0,0,126,127,5,121,0,0,127,
		16,1,0,0,0,128,129,5,111,0,0,129,141,5,114,0,0,130,131,5,111,0,0,131,141,
		5,117,0,0,132,133,5,92,0,0,133,134,5,108,0,0,134,135,5,111,0,0,135,141,
		5,114,0,0,136,137,5,92,0,0,137,138,5,118,0,0,138,139,5,101,0,0,139,141,
		5,101,0,0,140,128,1,0,0,0,140,130,1,0,0,0,140,132,1,0,0,0,140,136,1,0,
		0,0,141,18,1,0,0,0,142,143,5,97,0,0,143,144,5,110,0,0,144,159,5,100,0,
		0,145,146,5,101,0,0,146,159,5,116,0,0,147,148,5,92,0,0,148,149,5,108,0,
		0,149,150,5,97,0,0,150,151,5,110,0,0,151,159,5,100,0,0,152,153,5,92,0,
		0,153,154,5,119,0,0,154,155,5,101,0,0,155,156,5,100,0,0,156,157,5,103,
		0,0,157,159,5,101,0,0,158,142,1,0,0,0,158,145,1,0,0,0,158,147,1,0,0,0,
		158,152,1,0,0,0,159,20,1,0,0,0,160,161,5,92,0,0,161,162,5,110,0,0,162,
		163,5,101,0,0,163,164,5,103,0,0,164,22,1,0,0,0,165,166,5,116,0,0,166,167,
		5,114,0,0,167,168,5,117,0,0,168,174,5,101,0,0,169,170,5,118,0,0,170,171,
		5,114,0,0,171,172,5,97,0,0,172,174,5,105,0,0,173,165,1,0,0,0,173,169,1,
		0,0,0,174,24,1,0,0,0,175,176,5,102,0,0,176,177,5,97,0,0,177,178,5,108,
		0,0,178,179,5,115,0,0,179,185,5,101,0,0,180,181,5,102,0,0,181,182,5,97,
		0,0,182,183,5,117,0,0,183,185,5,120,0,0,184,175,1,0,0,0,184,180,1,0,0,
		0,185,26,1,0,0,0,186,209,2,60,62,0,187,188,5,60,0,0,188,209,5,61,0,0,189,
		190,5,62,0,0,190,209,5,61,0,0,191,192,5,33,0,0,192,209,5,61,0,0,193,194,
		5,92,0,0,194,195,5,108,0,0,195,196,5,101,0,0,196,209,5,113,0,0,197,198,
		5,92,0,0,198,199,5,103,0,0,199,200,5,101,0,0,200,209,5,113,0,0,201,202,
		5,92,0,0,202,203,5,110,0,0,203,204,5,101,0,0,204,209,5,113,0,0,205,206,
		5,92,0,0,206,207,5,110,0,0,207,209,5,101,0,0,208,186,1,0,0,0,208,187,1,
		0,0,0,208,189,1,0,0,0,208,191,1,0,0,0,208,193,1,0,0,0,208,197,1,0,0,0,
		208,201,1,0,0,0,208,205,1,0,0,0,209,28,1,0,0,0,210,211,5,92,0,0,211,212,
		5,105,0,0,212,213,5,110,0,0,213,30,1,0,0,0,214,216,7,0,0,0,215,214,1,0,
		0,0,216,217,1,0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,219,1,0,0,0,219,
		220,6,15,0,0,220,32,1,0,0,0,221,222,7,1,0,0,222,34,1,0,0,0,223,224,7,2,
		0,0,224,36,1,0,0,0,225,226,5,94,0,0,226,38,1,0,0,0,227,228,5,44,0,0,228,
		40,1,0,0,0,229,230,5,95,0,0,230,42,1,0,0,0,231,232,5,92,0,0,232,233,5,
		102,0,0,233,234,5,114,0,0,234,235,5,97,0,0,235,236,5,99,0,0,236,44,1,0,
		0,0,237,238,5,92,0,0,238,239,5,115,0,0,239,240,5,113,0,0,240,241,5,114,
		0,0,241,242,5,116,0,0,242,46,1,0,0,0,243,244,5,39,0,0,244,48,1,0,0,0,245,
		246,5,43,0,0,246,50,1,0,0,0,247,248,5,45,0,0,248,52,1,0,0,0,249,250,5,
		42,0,0,250,54,1,0,0,0,251,252,5,92,0,0,252,253,5,99,0,0,253,254,5,100,
		0,0,254,255,5,111,0,0,255,256,5,116,0,0,256,56,1,0,0,0,257,258,5,92,0,
		0,258,259,5,116,0,0,259,260,5,105,0,0,260,261,5,109,0,0,261,262,5,101,
		0,0,262,263,5,115,0,0,263,58,1,0,0,0,264,265,5,47,0,0,265,60,1,0,0,0,266,
		274,5,40,0,0,267,268,5,92,0,0,268,269,5,108,0,0,269,270,5,101,0,0,270,
		271,5,102,0,0,271,272,5,116,0,0,272,274,5,40,0,0,273,266,1,0,0,0,273,267,
		1,0,0,0,274,62,1,0,0,0,275,284,5,41,0,0,276,277,5,92,0,0,277,278,5,114,
		0,0,278,279,5,105,0,0,279,280,5,103,0,0,280,281,5,104,0,0,281,282,5,116,
		0,0,282,284,5,41,0,0,283,275,1,0,0,0,283,276,1,0,0,0,284,64,1,0,0,0,285,
		286,5,123,0,0,286,66,1,0,0,0,287,288,5,125,0,0,288,68,1,0,0,0,289,290,
		5,92,0,0,290,291,5,108,0,0,291,292,5,101,0,0,292,293,5,102,0,0,293,294,
		5,116,0,0,294,295,5,123,0,0,295,70,1,0,0,0,296,297,5,92,0,0,297,298,5,
		114,0,0,298,299,5,105,0,0,299,300,5,103,0,0,300,301,5,104,0,0,301,302,
		5,116,0,0,302,303,5,125,0,0,303,72,1,0,0,0,304,305,5,91,0,0,305,74,1,0,
		0,0,306,307,5,93,0,0,307,76,1,0,0,0,308,309,5,124,0,0,309,78,1,0,0,0,310,
		311,5,92,0,0,311,312,5,108,0,0,312,313,5,102,0,0,313,314,5,108,0,0,314,
		315,5,111,0,0,315,316,5,111,0,0,316,317,5,114,0,0,317,80,1,0,0,0,318,319,
		5,92,0,0,319,320,5,114,0,0,320,321,5,102,0,0,321,322,5,108,0,0,322,323,
		5,111,0,0,323,324,5,111,0,0,324,325,5,114,0,0,325,82,1,0,0,0,326,327,5,
		92,0,0,327,328,5,108,0,0,328,329,5,99,0,0,329,330,5,101,0,0,330,331,5,
		105,0,0,331,332,5,108,0,0,332,84,1,0,0,0,333,334,5,92,0,0,334,335,5,114,
		0,0,335,336,5,99,0,0,336,337,5,101,0,0,337,338,5,105,0,0,338,339,5,108,
		0,0,339,86,1,0,0,0,340,341,5,33,0,0,341,88,1,0,0,0,342,363,3,91,45,0,343,
		344,5,92,0,0,344,363,3,91,45,0,345,346,5,97,0,0,346,347,5,98,0,0,347,363,
		5,115,0,0,348,349,5,102,0,0,349,350,5,108,0,0,350,351,5,111,0,0,351,352,
		5,111,0,0,352,363,5,114,0,0,353,354,5,99,0,0,354,355,5,101,0,0,355,356,
		5,105,0,0,356,363,5,108,0,0,357,358,5,114,0,0,358,359,5,111,0,0,359,360,
		5,117,0,0,360,361,5,110,0,0,361,363,5,100,0,0,362,342,1,0,0,0,362,343,
		1,0,0,0,362,345,1,0,0,0,362,348,1,0,0,0,362,353,1,0,0,0,362,357,1,0,0,
		0,363,90,1,0,0,0,364,365,5,115,0,0,365,366,5,105,0,0,366,391,5,110,0,0,
		367,368,5,99,0,0,368,369,5,111,0,0,369,391,5,115,0,0,370,371,5,116,0,0,
		371,372,5,97,0,0,372,391,5,110,0,0,373,374,5,99,0,0,374,375,5,111,0,0,
		375,391,5,116,0,0,376,377,5,115,0,0,377,378,5,101,0,0,378,391,5,99,0,0,
		379,380,5,99,0,0,380,381,5,115,0,0,381,391,5,99,0,0,382,383,5,108,0,0,
		383,384,5,111,0,0,384,391,5,103,0,0,385,386,5,108,0,0,386,391,5,110,0,
		0,387,388,5,101,0,0,388,389,5,120,0,0,389,391,5,112,0,0,390,364,1,0,0,
		0,390,367,1,0,0,0,390,370,1,0,0,0,390,373,1,0,0,0,390,376,1,0,0,0,390,
		379,1,0,0,0,390,382,1,0,0,0,390,385,1,0,0,0,390,387,1,0,0,0,391,92,1,0,
		0,0,392,393,5,92,0,0,393,394,5,105,0,0,394,395,5,110,0,0,395,396,5,102,
		0,0,396,397,5,116,0,0,397,398,5,121,0,0,398,94,1,0,0,0,399,401,5,92,0,
		0,400,402,7,2,0,0,401,400,1,0,0,0,402,403,1,0,0,0,403,401,1,0,0,0,403,
		404,1,0,0,0,404,96,1,0,0,0,12,0,140,158,173,184,208,217,273,283,362,390,
		403,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
