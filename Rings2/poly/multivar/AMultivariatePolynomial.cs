using Cc.Redberry.Rings;
using Cc.Redberry.Rings.Bigint;
using Cc.Redberry.Rings.Io;
using Cc.Redberry.Rings.Poly;
using Cc.Redberry.Rings.Poly.Univar;
using Cc.Redberry.Rings.Util;
using Gnu.Trove.Impl.Hash;
using Gnu.Trove.Iterator;
using Gnu.Trove.Map.Hash;
using Gnu.Trove.Set.Hash;
using Org.Apache.Commons.Math3.Random;
using Java;
using Java.Util.Function;
using Java.Util.Stream;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using static Cc.Redberry.Rings.Poly.Multivar.RoundingMode;
using static Cc.Redberry.Rings.Poly.Multivar.Associativity;
using static Cc.Redberry.Rings.Poly.Multivar.Operator;
using static Cc.Redberry.Rings.Poly.Multivar.TokenType;
using static Cc.Redberry.Rings.Poly.Multivar.SystemInfo;

namespace Cc.Redberry.Rings.Poly.Multivar
{
    /// <summary>
    /// Parent class for multivariate polynomials.
    /// 
    /// <p> <i><b>Variables:</b></i> <p> The number of variables is invariant, which means that binary arithmetic operations
    /// on polynomials with different number of variables (see {@link #nVariables}) are prohibited. Of course all exponents
    /// of particular variable may be zero, so e.g.
    /// <pre>
    /// <code>MultivariatePolynomial.parse("x^2 + 2*x*y + y^3", "x", "y", "z")
    /// </code></pre>
    /// will have nVariables == 3 while "z" is actually absent in the poly.
    /// 
    /// <p> Particular string names of variables are not stored in the polynomial data structure, instead the variables are
    /// treated as consequent integer numbers (0, 1, 2,...), where 0 states for the first variable, 1 for the second etc.
    /// Information about variables is accessible by the integer index of the variable. The mapping between the variable
    /// index and its string representation should be stored separately outside this class. For example:
    /// <pre>
    /// <code>// x is the first variable, y is the second
    /// String[] variables = {"x", "y"};
    /// MultivariatePolynomial&lt;BigInteger&gt; poly =
    ///                  MultivariatePolynomial.parse("x^2 + 2*x*y + y^3", variables);
    /// 
    /// // degree in x
    /// int xDegree = poly.degree(0);
    /// assert xDegree == 2;
    /// // degree in y
    /// int yDegree = poly.degree(1);
    /// assert yDegree == 3;
    /// 
    /// // will use the specified mapping and print x^2 + 2*x*y + y^3
    /// System.out.println(poly.toString(variables));
    /// 
    /// // will use the default mapping and print a^2 + 2*a*b + b^3
    /// System.out.println(poly.toString());
    /// </code>
    /// </pre>
    /// 
    /// <p> <i><b>Terms storage and ordering:</b></i>
    /// 
    /// <p> Terms of multivariate polynomial are stored in a sorted map {@code DegreeVector -> Monomial} (see {@link
    /// MonomialSet}). The order of monomials is defined by the {@code Comparator<DegreeVector>} which possible values are
    /// {@link MonomialOrder#LEX}, {@link MonomialOrder#ALEX}, {@link MonomialOrder#GREVLEX} and {@link MonomialOrder#GRLEX}.
    /// All operations on the instances of this will preserve the ordering of this. The leading term of the poly is defined
    /// with respect to this ordering.
    /// </summary>
    /// <param name="<Term>">type of monomials</param>
    /// <param name="<Poly>">type of this (self-type)</param>
    /// <remarks>
    /// @seeIPolynomial
    /// @seeMultivariatePolynomialZp64
    /// @seeMultivariatePolynomial
    /// @since1.0
    /// </remarks>
    public abstract class AMultivariatePolynomial<Term, Poly> : IPolynomial<Poly>, MonomialSetView<Term>, Iterable<Term>
    {
        private static readonly long serialVersionUID = 1;
        /// <summary>
        /// The number of variables
        /// </summary>
        public readonly int nVariables;
        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        public readonly Comparator<DegreeVector> ordering;
        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        public readonly IMonomialAlgebra<Term> monomialAlgebra;
        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        readonly MonomialSet<Term> terms;
        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        private readonly Poly self = (Poly)this;
        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        AMultivariatePolynomial(int nVariables, Comparator<DegreeVector> ordering, IMonomialAlgebra<Term> monomialAlgebra, MonomialSet<Term> terms)
        {
            this.nVariables = nVariables;
            this.ordering = ordering;
            this.monomialAlgebra = monomialAlgebra;
            this.terms = terms;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        public static P SwapVariables<T extends AMonomial<T>, P extends AMultivariatePolynomial<T, P>>(P poly, int i, int j)
        {
            if (i == j)
                return poly.Clone();
            int[] newVariables = ArraysUtil.Sequence(poly.nVariables);
            newVariables[i] = j;
            newVariables[j] = i;
            return RenameVariables(poly, newVariables, poly.ordering);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        public static P RenameVariables<T extends AMonomial<T>, P extends AMultivariatePolynomial<T, P>>(P poly, int[] newVariables)
        {
            return RenameVariables(poly, newVariables, poly.ordering);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        public static T RenameVariables<T extends AMonomial<T>>(T e, int[] newVariables)
        {
            return e.SetDegreeVector(Map(e.exponents, newVariables), e.totalDegree);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        public static P RenameVariables<T extends AMonomial<T>, P extends AMultivariatePolynomial<T, P>>(P poly, int[] newVariables, Comparator<DegreeVector> newOrdering)
        {

            // NOTE: always return a copy of poly, even if order of variables is unchanged
            MonomialSet<T> data = new MonomialSet(newOrdering);
            foreach (T e in poly.terms)
                data.Add(RenameVariables(e, newVariables));
            return poly.Create(data);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        private static int[] Map(int[] degrees, int[] mapping)
        {
            int[] newDegrees = new int[degrees.Length];
            for (int i = 0; i < degrees.Length; i++)
                newDegrees[i] = degrees[mapping[i]];
            return newDegrees;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        public static Poly AsMultivariate<Term extends AMonomial<Term>, Poly extends AMultivariatePolynomial<Term, Poly>>(IUnivariatePolynomial poly, int nVariables, int variable, Comparator<DegreeVector> ordering)
        {
            if (poly is UnivariatePolynomial)
                return (Poly)MultivariatePolynomial.AsMultivariate((UnivariatePolynomial)poly, nVariables, variable, ordering);
            else if (poly is UnivariatePolynomialZp64)
                return (Poly)MultivariatePolynomialZp64.AsMultivariate((UnivariatePolynomialZp64)poly, nVariables, variable, ordering);
            else
                throw new Exception();
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        public abstract IUnivariatePolynomial AsUnivariate();
        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        Poly Create(MonomialSet<Term> terms)
        {
            return Create(nVariables, ordering, terms);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        Poly Create(int nVariables, MonomialSet<Term> terms)
        {
            return Create(nVariables, ordering, terms);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        abstract Poly Create(int nVariables, Comparator<DegreeVector> ordering, MonomialSet<Term> terms);
        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        public Poly Create(params Term[] terms)
        {
            return Create(Arrays.AsList(terms));
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        public Poly Create(Iterable<Term> terms)
        {
            MonomialSet<Term> monomials = new MonomialSet(ordering);
            foreach (Term term in terms)
            {
                if (term.exponents.Length != nVariables)
                    throw new ArgumentException();
                Add(monomials, term);
            }

            return Create(monomials);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        public Poly Create(Term term)
        {
            if (term.exponents.Length != nVariables)
                throw new ArgumentException();
            MonomialSet<Term> monomials = new MonomialSet(ordering);
            Add(monomials, term);
            return Create(monomials);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        public abstract Poly CreateConstantFromTerm(Term term);
        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        public Poly Create(DegreeVector term)
        {
            return Create(monomialAlgebra.Create(term));
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        public Poly CreateMonomial(int variable, int degree)
        {
            int[] degreeVector = new int[nVariables];
            degreeVector[variable] = degree;
            return Create(monomialAlgebra.Create(degreeVector));
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        public Poly SetOrdering(Comparator<DegreeVector> newOrdering)
        {
            if (ordering.Equals(newOrdering))
                return Clone();
            MonomialSet<Term> newData = new MonomialSet(newOrdering);
            newData.PutAll(terms);
            return Create(nVariables, newOrdering, newData);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        Poly SetOrderingUnsafe(Comparator<DegreeVector> newOrdering)
        {
            if (ordering.Equals(newOrdering))
                return self;
            return SetOrdering(newOrdering);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        protected virtual void Release()
        {
            cachedDegrees = null;
            cachedDegree = -1;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        public int Size()
        {
            return terms.Count;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        public bool IsZero()
        {
            return terms.IsEmpty();
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        public virtual bool IsLinearOrConstant()
        {
            if (Size() > 2)
                return false;
            if (IsConstant())
                return true;
            if (IsZeroCC())
                return Size() == 1;
            else
                return Size() == 2;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        public virtual bool IsLinearExactly()
        {
            if (Size() > 2)
                return false;
            if (IsConstant())
                return false;
            if (IsZeroCC())
                return Size() == 1;
            else
                return Size() == 2;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        public virtual bool IsZeroCC()
        {
            return !terms.ContainsKey(new DegreeVector(new int[nVariables], 0));
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        public IEnumerator<Term> Iterator()
        {
            return terms.Iterator();
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        public virtual IEnumerator<Term> AscendingIterator()
        {
            return terms.Values().Iterator();
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        public virtual IEnumerator<Term> DescendingIterator()
        {
            return terms.DescendingMap().Values().Iterator();
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        public virtual Term First()
        {
            return terms.First();
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        public virtual Term Last()
        {
            return terms.Last();
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        public Collection<Term> Collection()
        {
            return terms.Values();
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        public Term[] ToArray()
        {
            return terms.Values().ToArray(monomialAlgebra.CreateArray(terms.Count));
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        public bool IsMonomial()
        {
            return Size() <= 1;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        public bool IsVariable()
        {
            return IsMonomial() && IsEffectiveUnivariate() && LcAsPoly().IsOne() && !IsConstant();
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        public Poly ToZero()
        {
            terms.Clear();
            Release();
            return self;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        public Poly Set(Poly oth)
        {
            if (oth == this)
                return self;
            AssertSameCoefficientRingWith(oth);
            return LoadFrom(oth.terms);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        Poly LoadFrom(MonomialSet<Term> map)
        {
            terms.Clear();
            terms.PutAll(map);
            Release();
            return self;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        public Poly DropVariable(int variable)
        {
            MonomialSet<Term> newData = new MonomialSet(ordering);
            foreach (Term term in terms)
                newData.Add(term.Without(variable));
            return Create(nVariables - 1, newData);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        public Poly DropVariables(int[] variables)
        {
            MonomialSet<Term> newData = new MonomialSet(ordering);
            foreach (Term term in terms)
                newData.Add(term.Without(variables));
            return Create(nVariables - variables.Length, newData);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        public Poly DropSelectVariables(params int[] variables)
        {
            MonomialSet<Term> newData = new MonomialSet(ordering);
            foreach (Term term in terms)
                newData.Add(term.DropSelect(variables));
            return Create(variables.Length, newData);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        public Poly InsertVariable(int variable)
        {
            MonomialSet<Term> newData = new MonomialSet(ordering);
            foreach (Term term in terms)
                newData.Add(term.Insert(variable));
            return Create(nVariables + 1, newData);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        public Poly InsertVariable(int variable, int count)
        {
            MonomialSet<Term> newData = new MonomialSet(ordering);
            foreach (Term term in terms)
                newData.Add(term.Insert(variable, count));
            return Create(nVariables + count, newData);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        public Poly SetNVariables(int newNVariables)
        {
            if (newNVariables == nVariables)
                return self;
            MonomialSet<Term> newData = new MonomialSet(ordering);
            foreach (Term term in terms)
                newData.Add(term.SetNVariables(newNVariables));
            return Create(newNVariables, newData);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        public Poly MapVariables(int[] mapping)
        {
            int newNVars = ArraysUtil.Max(mapping) + 1;
            MonomialSet<Term> newData = new MonomialSet(ordering);
            foreach (Term term in terms)
                newData.Add(term.Map(newNVars, mapping));
            return Create(newNVars, newData);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        public Poly JoinNewVariable()
        {
            return JoinNewVariables(1);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        public Poly JoinNewVariables(int n)
        {
            MonomialSet<Term> newData = new MonomialSet(ordering);
            foreach (Term term in terms)
                newData.Add(term.JoinNewVariables(n));
            return Create(nVariables + n, newData);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        Poly JoinNewVariables(int newNVariables, int[] mapping)
        {
            MonomialSet<Term> newData = new MonomialSet(ordering);
            foreach (Term term in terms)
                newData.Add(term.JoinNewVariables(newNVariables, mapping));
            return Create(newNVariables, newData);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        public int NUsedVariables()
        {
            int[] degrees = DegreesRef();
            int r = 0;
            foreach (int d in degrees)
                if (d != 0)
                    ++r;
            return r;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        private int cachedDegree = -1;
        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        public virtual int Degree()
        {

            // fixme replace with degreeSum ?
            if (cachedDegree == -1)
            {
                int max = 0;
                foreach (Term db in terms)
                    max = Math.Max(max, db.totalDegree);
                cachedDegree = max;
            }

            return cachedDegree;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        public virtual int Degree(params int[] variables)
        {
            int max = 0;
            foreach (Term db in terms)
                max = Math.Max(max, db.DvTotalDegree(variables));
            return max;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        public virtual int DegreeMax()
        {
            return ArraysUtil.Max(DegreesRef());
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        public int Degree(int variable)
        {
            return DegreesRef()[variable];
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        private int[] cachedDegrees = null;
        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        protected virtual int[] DegreesRef()
        {
            if (cachedDegrees == null)
            {
                int[] degrees = new int[nVariables];
                foreach (Term db in terms)
                    for (int i = 0; i < nVariables; i++)
                        if (db.exponents[i] > degrees[i])
                            degrees[i] = db.exponents[i];
                return cachedDegrees = degrees;
            }

            return cachedDegrees;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        public int[] Degrees()
        {
            return DegreesRef().Clone();
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        public int[] Occurrences()
        {
            int[] occurrences = new int[nVariables];
            foreach (Term t in terms)
            {
                for (int i = 0; i < nVariables; i++)
                {
                    if (t.exponents[i] > 0)
                        ++occurrences[i];
                }
            }

            return occurrences;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        public int[] UniqueOccurrences()
        {
            TIntHashSet[] degrees = new TIntHashSet[nVariables];
            for (int i = 0; i < nVariables; i++)
            {
                degrees[i] = new TIntHashSet();
            }

            int[] occurrences = new int[nVariables];
            foreach (Term t in terms)
            {
                for (int i = 0; i < nVariables; i++)
                {
                    int exp = t.exponents[i];
                    if (exp > 0 && !degrees[i].Contains(exp))
                    {
                        degrees[i].Add(exp);
                        ++occurrences[i];
                    }
                }
            }

            return occurrences;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        public int[] Multidegree()
        {
            return Lt().exponents;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        public int[] Degrees(int variable)
        {
            TIntHashSet degrees = new TIntHashSet();
            foreach (Term db in terms)
                degrees.Add(db.exponents[variable]);
            return degrees.ToArray();
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        public int DegreeSum()
        {
            return ArraysUtil.Sum(DegreesRef());
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        public int TotalDegree()
        {
            return DegreeSum();
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        public virtual double Sparsity()
        {
            double sparsity = Size();
            foreach (int d in DegreesRef())
            {
                if (d != 0)
                    sparsity /= (d + 1);
            }

            return sparsity;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        public virtual double Sparsity2()
        {
            TIntHashSet distinctTotalDegrees = new TIntHashSet();
            terms.KeySet().Stream().MapToInt((dv) => dv.totalDegree).ForEach(distinctTotalDegrees.Add());
            TIntIterator it = distinctTotalDegrees.Iterator();
            double nDenseTerms = 0;
            while (it.HasNext())
            {
                int deg = it.Next();
                double d = BigIntegerUtil.Binomial(deg + nVariables - 1, deg).DoubleValue();
                nDenseTerms += d;
                if (d == Double.MAX_VALUE)
                    return Size() / d;
            }

            return Size() / nDenseTerms;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        public int Ecart()
        {
            return DegreeSum() - Lt().totalDegree;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        public bool IsHomogeneous()
        {
            int deg = -1;
            foreach (Term term in terms)
                if (deg == -1)
                    deg = term.totalDegree;
                else if (term.totalDegree != deg)
                    return false;
            return true;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        public Poly Homogenize(int variable)
        {
            int deg = TotalDegree();
            MonomialSet<Term> result = new MonomialSet(ordering);
            foreach (Term term in terms)
            {
                DegreeVector dv = term.DvInsert(variable);
                dv = dv.DvSet(variable, deg - dv.totalDegree);
                result.Add(term.SetDegreeVector(dv));
            }

            return Create(nVariables + 1, result);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        public bool IsEffectiveUnivariate()
        {
            return UnivariateVariable() != -1;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        public int UnivariateVariable()
        {
            if (IsConstant())
                return 0;
            if (nVariables == 1)
                return 0;
            int[] degrees = DegreesRef();
            int var = -1;
            for (int i = 0; i < nVariables; i++)
            {
                if (degrees[i] != 0)
                {
                    if (var != -1)
                        return -1;
                    else
                        var = i;
                }
            }

            return var;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        public Poly CoefficientOf(int variable, int exponent)
        {
            Poly result = CreateZero();
            foreach (Term e in terms)
            {
                if (e.exponents[variable] != exponent)
                    continue;
                result.Add(e.SetZero(variable));
            }

            return result;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        public Poly CoefficientOf(int[] variables, int[] exponents)
        {
            if (variables.Length != exponents.Length)
                throw new ArgumentException();
            Poly result = CreateZero();
            out:
                foreach (Term e in terms)
                {
                    for (int i = 0; i < variables.Length; i++)
                        if (e.exponents[variables[i]] != exponents[i])
                            continue;
                    result.Add(e.SetZero(variables));
                }

            return result;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        public Poly DropCoefficientOf(int[] variables, int[] exponents)
        {
            if (variables.Length != exponents.Length)
                throw new ArgumentException();
            Poly result = CreateZero();
            IEnumerator<Term> it = terms.Iterator();
            out:
                while (it.HasNext())
                {
                    Term e = it.Next();
                    for (int i = 0; i < variables.Length; i++)
                        if (e.exponents[variables[i]] != exponents[i])
                            continue;
                    result.Add(e.SetZero(variables));
                    it.Remove();
                }

            return result;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        public UnivariatePolynomial<Poly> AsUnivariate(int variable)
        {
            MultivariateRing<Poly> ring = new MultivariateRing(self);
            Poly[] univarData = ring.CreateZeroesArray(Degree(variable) + 1);
            foreach (Term e in terms)
                univarData[e.exponents[variable]].Add(e[variable] = 0);
            return UnivariatePolynomial.CreateUnsafe(ring, univarData);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        public UnivariatePolynomial<Poly> AsUnivariateEliminate(int variable)
        {
            MultivariateRing<Poly> ring = new MultivariateRing(CreateZero().DropVariable(variable));
            Poly[] univarData = ring.CreateZeroesArray(Degree(variable) + 1);
            foreach (Term e in terms)
                univarData[e.exponents[variable]].Add(e.Without(variable));
            return UnivariatePolynomial.CreateUnsafe(ring, univarData);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        public static Poly AsMultivariate<Term extends AMonomial<Term>, Poly extends AMultivariatePolynomial<Term, Poly>>(UnivariatePolynomial<Poly> univariate, int uVariable, bool join)
        {
            Poly factory = univariate[0];
            if (join)
                factory = factory.InsertVariable(uVariable);
            Poly result = factory.CreateZero();
            for (int i = 0; i <= univariate.Degree(); i++)
            {
                Poly cf = univariate[i];
                if (join)
                    cf = cf.InsertVariable(uVariable);
                result.Add(cf.Multiply(factory.CreateMonomial(uVariable, i)));
            }

            return result;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        public abstract MultivariatePolynomial<TWildcardTodoIUnivariatePolynomial> AsOverUnivariate(int variable);
        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        public abstract MultivariatePolynomial<TWildcardTodoIUnivariatePolynomial> AsOverUnivariateEliminate(int variable);
        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        public abstract MultivariatePolynomial<Poly> AsOverMultivariate(params int[] variables);
        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        public MultivariatePolynomial<Poly> AsOverMultivariateEliminate(params int[] variables)
        {
            return AsOverMultivariateEliminate(variables, ordering);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        public abstract MultivariatePolynomial<Poly> AsOverMultivariateEliminate(int[] variables, Comparator<DegreeVector> ordering);
        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        public static Poly AsMultivariate<Term extends AMonomial<Term>, Poly extends AMultivariatePolynomial<Term, Poly>>(UnivariatePolynomial<Poly> uPoly, int variable)
        {
            Poly result = uPoly.ring.GetZero();
            for (int i = uPoly.degree(); i >= 0; --i)
            {
                if (uPoly.IsZeroAt(i))
                    continue;
                result.Add(result.CreateMonomial(variable, i).Multiply(uPoly[i]));
            }

            return result;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        public abstract Poly PrimitivePart(int variable);
        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        public abstract IUnivariatePolynomial ContentUnivariate(int variable);
        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        public abstract Poly Monic(Comparator<DegreeVector> ordering);
        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        public abstract Poly MonicWithLC(Comparator<DegreeVector> ordering, Poly oth);
        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        public Poly Content(int variable)
        {
            return AsMultivariate(ContentUnivariate(variable), nVariables, variable, ordering);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        public Poly ContentExcept(int variable)
        {
            return AsUnivariate(variable).Content();
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        public Poly MultiplyByMonomial(int variable, int exponent)
        {
            if (exponent == 0)
                return self;
            Collection<Term> oldData = new List(terms.Values());
            terms.Clear();
            foreach (Term term in oldData)
                terms.Add(term[variable] = term.exponents[variable] + exponent);
            Release();
            return self;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        public Poly Lc(int variable)
        {
            int degree = Degree(variable);
            Poly result = CreateZero();
            foreach (Term term in this)
                if (term.exponents[variable] == degree)
                    result.Add(term[variable] = 0);
            return result;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        public Poly SetLC(int variable, Poly lc)
        {
            int degree = Degree(variable);
            lc = lc.Clone().MultiplyByMonomial(variable, degree);
            Iterator<Map.Entry<DegreeVector, Term>> it = terms.EntrySet().Iterator();
            while (it.HasNext())
            {
                Term term = it.Next().GetValue();
                if (term.exponents[variable] == degree)
                    it.Remove();
            }

            terms.PutAll(lc.terms);
            Release();
            return self;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        public Term Lt(Comparator<DegreeVector> ordering)
        {
            if (ordering.Equals(this.ordering))
                return Lt();
            if (Size() == 0)
                return monomialAlgebra.GetZeroTerm(nVariables);
            return terms.Values().Stream().Max(ordering).Get();
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        public Term Lt()
        {
            return Size() == 0 ? monomialAlgebra.GetZeroTerm(nVariables) : terms.Last();
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        public Term Mt()
        {
            return Size() == 0 ? monomialAlgebra.GetZeroTerm(nVariables) : terms.First();
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        public abstract Poly LcAsPoly(Comparator<DegreeVector> ordering);
        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        public Poly LtAsPoly()
        {
            return Create(Lt());
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        public Term MonomialContent()
        {
            return CommonContent(null);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        Term CommonContent(Term monomial)
        {
            if (!CcAsPoly().IsZero())
                return monomialAlgebra.GetUnitTerm(nVariables);
            int[] exponents = monomial == null ? null : monomial.exponents.Clone();
            int totalDegree = -1;
            foreach (Term degreeVector in terms)
                if (exponents == null)
                {
                    exponents = degreeVector.exponents.Clone();
                    totalDegree = degreeVector.totalDegree;
                }
                else
                {
                    totalDegree = SetMin(degreeVector.exponents, exponents);
                    if (totalDegree == 0)
                        break;
                }

            if (exponents == null)
                return monomialAlgebra.GetUnitTerm(nVariables);
            return monomialAlgebra.Create(new DegreeVector(exponents, totalDegree));
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        static int SetMin(int[] dv, int[] exponents)
        {
            int sum = 0;
            for (int i = 0; i < exponents.Length; ++i)
            {
                if (dv[i] < exponents[i])
                    exponents[i] = dv[i];
                sum += exponents[i];
            }

            return sum;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        public Poly DivideDegreeVectorOrNull(DegreeVector monomial)
        {
            if (monomial.IsZeroVector())
                return self;
            MonomialSet<Term> map = new MonomialSet(ordering);
            foreach (Term term in terms)
            {
                Term dv = term.DivideOrNull(monomial);
                if (dv == null)
                    return null;
                map.Add(dv);
            }

            return LoadFrom(map);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        void CheckSameDomainWith(Term oth)
        {
            if (nVariables != oth.exponents.Length)
                throw new ArgumentException("Combining multivariate polynomials from different fields: this.nVariables = " + nVariables + " oth.nVariables = " + oth.NVariables());
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        public abstract Poly DivideOrNull(Term monomial);
        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        abstract void Add(MonomialSet<Term> terms, Term term);
        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        abstract void Subtract(MonomialSet<Term> terms, Term term);
        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        public Poly Add(Poly oth)
        {
            if (terms == oth.terms)
                return Multiply(2);
            AssertSameCoefficientRingWith(oth);
            if (oth.IsZero())
                return self;
            foreach (Term term in oth.terms)
                Add(terms, term);
            Release();
            return self;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        public Poly Subtract(Poly oth)
        {
            if (terms == oth.terms)
                return ToZero();
            AssertSameCoefficientRingWith(oth);
            if (oth.IsZero())
                return self;
            foreach (Term term in oth.terms)
                Subtract(terms, term);
            Release();
            return self;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        public Poly Subtract(Term cf, Poly oth)
        {
            if (monomialAlgebra.IsZero(cf))
                return self;
            if (terms == oth.terms && monomialAlgebra.IsOne(cf))
                return ToZero();
            AssertSameCoefficientRingWith(oth);
            if (oth.IsZero())
                return self;
            foreach (Term term in oth.terms)
                Subtract(terms, monomialAlgebra.Multiply(cf, term));
            Release();
            return self;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        public Poly Add(Term monomial)
        {
            CheckSameDomainWith(monomial);
            Add(terms, monomial);
            Release();
            return self;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        public Poly Put(Term monomial)
        {
            CheckSameDomainWith(monomial);
            terms.Add(monomial);
            Release();
            return self;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        public Poly Subtract(Term monomial)
        {
            CheckSameDomainWith(monomial);
            Subtract(terms, monomial);
            Release();
            return self;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        public Poly Negate()
        {
            foreach (Map.Entry<DegreeVector, Term> entry in terms.EntrySet())
            {
                Term term = entry.GetValue();
                entry.SetValue(monomialAlgebra.Negate(term));
            }

            Release();
            return self;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        public Poly Add(Iterable<Term> monomials)
        {
            foreach (Term term in monomials)
                Add(term);
            return self;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        public Poly Add(params Term[] monomials)
        {
            return Add(Arrays.AsList(monomials));
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        public Poly SubtractLt()
        {
            terms.PollLastEntry();
            Release();
            return self;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        public abstract Poly Multiply(Term monomial);
        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        public Poly MultiplyByDegreeVector(DegreeVector dv)
        {
            if (dv.IsZeroVector())
                return self;
            return Multiply(monomialAlgebra.Create(dv));
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        public HashSet<DegreeVector> GetSkeleton()
        {
            return Collections.UnmodifiableSet(terms.KeySet());
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        public Poly SetAllCoefficientsToUnit()
        {
            Term unit = monomialAlgebra.GetUnitTerm(nVariables);
            foreach (Map.Entry<DegreeVector, Term> entry in terms.EntrySet())
                entry.SetValue(unit.SetDegreeVector(entry.GetKey()));
            Release();
            return self;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        public HashSet<DegreeVector> GetSkeleton(params int[] variables)
        {
            return terms.KeySet().Stream().Map((dv) => dv.DvSelect(variables)).Collect(Collectors.ToCollection(() => new TreeSet(ordering)));
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        public HashSet<DegreeVector> GetSkeletonDrop(params int[] variables)
        {
            int[] variablesSorted = variables.Clone();
            Arrays.Sort(variablesSorted);
            return terms.KeySet().Stream().Map((dv) => dv.DvDropSelect(variablesSorted)).Collect(Collectors.ToCollection(() => new TreeSet(ordering)));
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to all except specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables to exclude</param>
        /// <returns>skeleton of this poly with respect to all except specified {@code variables}</returns>
        public HashSet<DegreeVector> GetSkeletonExcept(params int[] variables)
        {
            return terms.KeySet().Stream().Map((dv) => dv.DvSetZero(variables)).Collect(Collectors.ToCollection(() => new TreeSet(ordering)));
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to all except specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables to exclude</param>
        /// <returns>skeleton of this poly with respect to all except specified {@code variables}</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton and {@code false} otherwise</returns>
        public bool SameSkeletonQ(AMultivariatePolynomial oth)
        {
            return GetSkeleton().Equals(oth.GetSkeleton());
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to all except specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables to exclude</param>
        /// <returns>skeleton of this poly with respect to all except specified {@code variables}</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect to specified {@code variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to test</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to specified {@code
        ///         variables} and {@code false} otherwise</returns>
        public bool SameSkeletonQ(AMultivariatePolynomial oth, params int[] variables)
        {
            return GetSkeleton(variables).Equals(oth.GetSkeleton(variables));
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to all except specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables to exclude</param>
        /// <returns>skeleton of this poly with respect to all except specified {@code variables}</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect to specified {@code variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to test</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to specified {@code
        ///         variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect all except specified {@code
        /// variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to exclude</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to all except specified
        ///         {@code variables} and {@code false} otherwise</returns>
        public bool SameSkeletonExceptQ(AMultivariatePolynomial oth, params int[] variables)
        {
            return GetSkeletonExcept(variables).Equals(oth.GetSkeletonExcept(variables));
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to all except specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables to exclude</param>
        /// <returns>skeleton of this poly with respect to all except specified {@code variables}</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect to specified {@code variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to test</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to specified {@code
        ///         variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect all except specified {@code
        /// variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to exclude</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to all except specified
        ///         {@code variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Gives partial derivative with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>partial derivative with respect to specified variable</returns>
        public Poly Derivative(int variable)
        {
            return Derivative(variable, 1);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to all except specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables to exclude</param>
        /// <returns>skeleton of this poly with respect to all except specified {@code variables}</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect to specified {@code variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to test</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to specified {@code
        ///         variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect all except specified {@code
        /// variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to exclude</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to all except specified
        ///         {@code variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Gives partial derivative with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>partial derivative with respect to specified variable</returns>
        /// <summary>
        /// Gives partial derivative of specified {@code order} with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>partial derivative of specified {@code order} with respect to specified variable</returns>
        public abstract Poly Derivative(int variable, int order);
        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to all except specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables to exclude</param>
        /// <returns>skeleton of this poly with respect to all except specified {@code variables}</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect to specified {@code variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to test</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to specified {@code
        ///         variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect all except specified {@code
        /// variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to exclude</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to all except specified
        ///         {@code variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Gives partial derivative with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>partial derivative with respect to specified variable</returns>
        /// <summary>
        /// Gives partial derivative of specified {@code order} with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>partial derivative of specified {@code order} with respect to specified variable</returns>
        /// <summary>
        /// Gives (unevaluated) coefficient of Taylor series expansion for specified variable that is {@code derivative(poly,
        /// variable, order) / order! }, where the derivative is formal derivative and calculated with arithmetic performed
        /// in Z ring (to overcome possible zeros in Zp).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>{@code derivative(poly, variable, order) / order! }, where the derivative is formal derivative and
        ///         calculated with arithmetic performed in Z ring (to overcome possible zeros in Zp)</returns>
        public abstract Poly SeriesCoefficient(int variable, int order);
        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to all except specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables to exclude</param>
        /// <returns>skeleton of this poly with respect to all except specified {@code variables}</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect to specified {@code variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to test</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to specified {@code
        ///         variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect all except specified {@code
        /// variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to exclude</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to all except specified
        ///         {@code variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Gives partial derivative with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>partial derivative with respect to specified variable</returns>
        /// <summary>
        /// Gives partial derivative of specified {@code order} with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>partial derivative of specified {@code order} with respect to specified variable</returns>
        /// <summary>
        /// Gives (unevaluated) coefficient of Taylor series expansion for specified variable that is {@code derivative(poly,
        /// variable, order) / order! }, where the derivative is formal derivative and calculated with arithmetic performed
        /// in Z ring (to overcome possible zeros in Zp).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>{@code derivative(poly, variable, order) / order! }, where the derivative is formal derivative and
        ///         calculated with arithmetic performed in Z ring (to overcome possible zeros in Zp)</returns>
        /// <summary>
        /// Substitutes {@code 0} for {@code variable} (new instance created).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for {@code variable}</returns>
        public Poly EvaluateAtZero(int variable)
        {
            MonomialSet<Term> newData = new MonomialSet(ordering);
            foreach (Term el in terms)
                if (el.exponents[variable] == 0)
                    newData.Add(el);
            return Create(newData);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to all except specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables to exclude</param>
        /// <returns>skeleton of this poly with respect to all except specified {@code variables}</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect to specified {@code variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to test</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to specified {@code
        ///         variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect all except specified {@code
        /// variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to exclude</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to all except specified
        ///         {@code variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Gives partial derivative with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>partial derivative with respect to specified variable</returns>
        /// <summary>
        /// Gives partial derivative of specified {@code order} with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>partial derivative of specified {@code order} with respect to specified variable</returns>
        /// <summary>
        /// Gives (unevaluated) coefficient of Taylor series expansion for specified variable that is {@code derivative(poly,
        /// variable, order) / order! }, where the derivative is formal derivative and calculated with arithmetic performed
        /// in Z ring (to overcome possible zeros in Zp).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>{@code derivative(poly, variable, order) / order! }, where the derivative is formal derivative and
        ///         calculated with arithmetic performed in Z ring (to overcome possible zeros in Zp)</returns>
        /// <summary>
        /// Substitutes {@code 0} for {@code variable} (new instance created).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for {@code variable}</returns>
        /// <summary>
        /// Substitutes {@code 0} for all specified {@code variables} (new instance created).
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for all specified {@code variables}</returns>
        public Poly EvaluateAtZero(int[] variables)
        {
            if (variables.Length == 0)
                return Clone();
            MonomialSet<Term> newData = new MonomialSet(ordering);
            out:
                foreach (Term el in terms)
                {
                    foreach (int variable in variables)
                        if (el.exponents[variable] != 0)
                            continue;
                    newData.Add(el);
                }

            return Create(newData);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to all except specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables to exclude</param>
        /// <returns>skeleton of this poly with respect to all except specified {@code variables}</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect to specified {@code variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to test</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to specified {@code
        ///         variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect all except specified {@code
        /// variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to exclude</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to all except specified
        ///         {@code variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Gives partial derivative with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>partial derivative with respect to specified variable</returns>
        /// <summary>
        /// Gives partial derivative of specified {@code order} with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>partial derivative of specified {@code order} with respect to specified variable</returns>
        /// <summary>
        /// Gives (unevaluated) coefficient of Taylor series expansion for specified variable that is {@code derivative(poly,
        /// variable, order) / order! }, where the derivative is formal derivative and calculated with arithmetic performed
        /// in Z ring (to overcome possible zeros in Zp).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>{@code derivative(poly, variable, order) / order! }, where the derivative is formal derivative and
        ///         calculated with arithmetic performed in Z ring (to overcome possible zeros in Zp)</returns>
        /// <summary>
        /// Substitutes {@code 0} for {@code variable} (new instance created).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for {@code variable}</returns>
        /// <summary>
        /// Substitutes {@code 0} for all specified {@code variables} (new instance created).
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for all specified {@code variables}</returns>
        /// <summary>
        /// Gives the derivative vector
        /// </summary>
        /// <returns>derivative vector</returns>
        public Poly[] Derivative()
        {
            Poly[] result = CreateArray(nVariables);
            for (int i = 0; i < nVariables; ++i)
                result[i] = Derivative(i);
            return result;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to all except specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables to exclude</param>
        /// <returns>skeleton of this poly with respect to all except specified {@code variables}</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect to specified {@code variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to test</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to specified {@code
        ///         variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect all except specified {@code
        /// variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to exclude</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to all except specified
        ///         {@code variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Gives partial derivative with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>partial derivative with respect to specified variable</returns>
        /// <summary>
        /// Gives partial derivative of specified {@code order} with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>partial derivative of specified {@code order} with respect to specified variable</returns>
        /// <summary>
        /// Gives (unevaluated) coefficient of Taylor series expansion for specified variable that is {@code derivative(poly,
        /// variable, order) / order! }, where the derivative is formal derivative and calculated with arithmetic performed
        /// in Z ring (to overcome possible zeros in Zp).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>{@code derivative(poly, variable, order) / order! }, where the derivative is formal derivative and
        ///         calculated with arithmetic performed in Z ring (to overcome possible zeros in Zp)</returns>
        /// <summary>
        /// Substitutes {@code 0} for {@code variable} (new instance created).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for {@code variable}</returns>
        /// <summary>
        /// Substitutes {@code 0} for all specified {@code variables} (new instance created).
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for all specified {@code variables}</returns>
        /// <summary>
        /// Gives the derivative vector
        /// </summary>
        /// <returns>derivative vector</returns>
        /// <summary>
        /// Consider coefficients of this as constant polynomials of the same type as a given factory polynomial
        /// </summary>
        /// <param name="factory">factory polynomial</param>
        public MultivariatePolynomial<Poly> AsOverPoly(Poly factory)
        {
            MonomialSet<Monomial<Poly>> newTerms = new MonomialSet(ordering);
            foreach (Term term in terms)
                newTerms.Add(new Monomial(term, factory.CreateConstantFromTerm(term)));
            return new MultivariatePolynomial(nVariables, Rings.MultivariateRing(factory), ordering, newTerms);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to all except specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables to exclude</param>
        /// <returns>skeleton of this poly with respect to all except specified {@code variables}</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect to specified {@code variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to test</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to specified {@code
        ///         variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect all except specified {@code
        /// variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to exclude</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to all except specified
        ///         {@code variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Gives partial derivative with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>partial derivative with respect to specified variable</returns>
        /// <summary>
        /// Gives partial derivative of specified {@code order} with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>partial derivative of specified {@code order} with respect to specified variable</returns>
        /// <summary>
        /// Gives (unevaluated) coefficient of Taylor series expansion for specified variable that is {@code derivative(poly,
        /// variable, order) / order! }, where the derivative is formal derivative and calculated with arithmetic performed
        /// in Z ring (to overcome possible zeros in Zp).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>{@code derivative(poly, variable, order) / order! }, where the derivative is formal derivative and
        ///         calculated with arithmetic performed in Z ring (to overcome possible zeros in Zp)</returns>
        /// <summary>
        /// Substitutes {@code 0} for {@code variable} (new instance created).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for {@code variable}</returns>
        /// <summary>
        /// Substitutes {@code 0} for all specified {@code variables} (new instance created).
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for all specified {@code variables}</returns>
        /// <summary>
        /// Gives the derivative vector
        /// </summary>
        /// <returns>derivative vector</returns>
        /// <summary>
        /// Consider coefficients of this as constant polynomials of the same type as a given factory polynomial
        /// </summary>
        /// <param name="factory">factory polynomial</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        public Poly Composition(params Poly[] values)
        {
            if (values.Length != nVariables)
                throw new ArgumentException();
            Poly factory = values[0];
            return AsOverPoly(factory).Evaluate(values);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to all except specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables to exclude</param>
        /// <returns>skeleton of this poly with respect to all except specified {@code variables}</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect to specified {@code variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to test</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to specified {@code
        ///         variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect all except specified {@code
        /// variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to exclude</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to all except specified
        ///         {@code variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Gives partial derivative with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>partial derivative with respect to specified variable</returns>
        /// <summary>
        /// Gives partial derivative of specified {@code order} with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>partial derivative of specified {@code order} with respect to specified variable</returns>
        /// <summary>
        /// Gives (unevaluated) coefficient of Taylor series expansion for specified variable that is {@code derivative(poly,
        /// variable, order) / order! }, where the derivative is formal derivative and calculated with arithmetic performed
        /// in Z ring (to overcome possible zeros in Zp).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>{@code derivative(poly, variable, order) / order! }, where the derivative is formal derivative and
        ///         calculated with arithmetic performed in Z ring (to overcome possible zeros in Zp)</returns>
        /// <summary>
        /// Substitutes {@code 0} for {@code variable} (new instance created).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for {@code variable}</returns>
        /// <summary>
        /// Substitutes {@code 0} for all specified {@code variables} (new instance created).
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for all specified {@code variables}</returns>
        /// <summary>
        /// Gives the derivative vector
        /// </summary>
        /// <returns>derivative vector</returns>
        /// <summary>
        /// Consider coefficients of this as constant polynomials of the same type as a given factory polynomial
        /// </summary>
        /// <param name="factory">factory polynomial</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        public sPoly Composition<sPoly extends IUnivariatePolynomial<sPoly>>(params sPoly[] values)
        {
            if (values.Length != nVariables)
                throw new ArgumentException();
            return Composition(Rings.UnivariateRing(values[0]), values);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to all except specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables to exclude</param>
        /// <returns>skeleton of this poly with respect to all except specified {@code variables}</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect to specified {@code variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to test</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to specified {@code
        ///         variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect all except specified {@code
        /// variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to exclude</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to all except specified
        ///         {@code variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Gives partial derivative with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>partial derivative with respect to specified variable</returns>
        /// <summary>
        /// Gives partial derivative of specified {@code order} with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>partial derivative of specified {@code order} with respect to specified variable</returns>
        /// <summary>
        /// Gives (unevaluated) coefficient of Taylor series expansion for specified variable that is {@code derivative(poly,
        /// variable, order) / order! }, where the derivative is formal derivative and calculated with arithmetic performed
        /// in Z ring (to overcome possible zeros in Zp).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>{@code derivative(poly, variable, order) / order! }, where the derivative is formal derivative and
        ///         calculated with arithmetic performed in Z ring (to overcome possible zeros in Zp)</returns>
        /// <summary>
        /// Substitutes {@code 0} for {@code variable} (new instance created).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for {@code variable}</returns>
        /// <summary>
        /// Substitutes {@code 0} for all specified {@code variables} (new instance created).
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for all specified {@code variables}</returns>
        /// <summary>
        /// Gives the derivative vector
        /// </summary>
        /// <returns>derivative vector</returns>
        /// <summary>
        /// Consider coefficients of this as constant polynomials of the same type as a given factory polynomial
        /// </summary>
        /// <param name="factory">factory polynomial</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="uRing">ring of univariate polynomials</param>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        public sPoly Composition<sPoly extends IUnivariatePolynomial<sPoly>>(Ring<sPoly> uRing, params sPoly[] values)
        {
            if (values.Length != nVariables)
                throw new ArgumentException();
            sPoly factory = values[0];
            if (this is MultivariatePolynomialZp64)
                return ((MultivariatePolynomialZp64)this).MapCoefficients(uRing, uRing.ValueOf()).Evaluate(values);
            else
                return (sPoly)((MultivariatePolynomial)this).MapCoefficients(uRing, (cf) => ((UnivariatePolynomial)factory).CreateConstant(cf)).Evaluate(values);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to all except specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables to exclude</param>
        /// <returns>skeleton of this poly with respect to all except specified {@code variables}</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect to specified {@code variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to test</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to specified {@code
        ///         variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect all except specified {@code
        /// variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to exclude</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to all except specified
        ///         {@code variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Gives partial derivative with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>partial derivative with respect to specified variable</returns>
        /// <summary>
        /// Gives partial derivative of specified {@code order} with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>partial derivative of specified {@code order} with respect to specified variable</returns>
        /// <summary>
        /// Gives (unevaluated) coefficient of Taylor series expansion for specified variable that is {@code derivative(poly,
        /// variable, order) / order! }, where the derivative is formal derivative and calculated with arithmetic performed
        /// in Z ring (to overcome possible zeros in Zp).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>{@code derivative(poly, variable, order) / order! }, where the derivative is formal derivative and
        ///         calculated with arithmetic performed in Z ring (to overcome possible zeros in Zp)</returns>
        /// <summary>
        /// Substitutes {@code 0} for {@code variable} (new instance created).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for {@code variable}</returns>
        /// <summary>
        /// Substitutes {@code 0} for all specified {@code variables} (new instance created).
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for all specified {@code variables}</returns>
        /// <summary>
        /// Gives the derivative vector
        /// </summary>
        /// <returns>derivative vector</returns>
        /// <summary>
        /// Consider coefficients of this as constant polynomials of the same type as a given factory polynomial
        /// </summary>
        /// <param name="factory">factory polynomial</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="uRing">ring of univariate polynomials</param>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        public Poly Composition(IList<Poly> values)
        {
            if (nVariables == 0)
                return self;
            return Composition(values.ToArray(values[0].CreateArray(values.Count)));
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to all except specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables to exclude</param>
        /// <returns>skeleton of this poly with respect to all except specified {@code variables}</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect to specified {@code variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to test</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to specified {@code
        ///         variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect all except specified {@code
        /// variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to exclude</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to all except specified
        ///         {@code variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Gives partial derivative with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>partial derivative with respect to specified variable</returns>
        /// <summary>
        /// Gives partial derivative of specified {@code order} with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>partial derivative of specified {@code order} with respect to specified variable</returns>
        /// <summary>
        /// Gives (unevaluated) coefficient of Taylor series expansion for specified variable that is {@code derivative(poly,
        /// variable, order) / order! }, where the derivative is formal derivative and calculated with arithmetic performed
        /// in Z ring (to overcome possible zeros in Zp).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>{@code derivative(poly, variable, order) / order! }, where the derivative is formal derivative and
        ///         calculated with arithmetic performed in Z ring (to overcome possible zeros in Zp)</returns>
        /// <summary>
        /// Substitutes {@code 0} for {@code variable} (new instance created).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for {@code variable}</returns>
        /// <summary>
        /// Substitutes {@code 0} for all specified {@code variables} (new instance created).
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for all specified {@code variables}</returns>
        /// <summary>
        /// Gives the derivative vector
        /// </summary>
        /// <returns>derivative vector</returns>
        /// <summary>
        /// Consider coefficients of this as constant polynomials of the same type as a given factory polynomial
        /// </summary>
        /// <param name="factory">factory polynomial</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="uRing">ring of univariate polynomials</param>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomial instead of specified variable (that is {@code this(x_1, ..., value, ..., x_N)},
        /// where value is on the place of specified variable)
        /// </summary>
        public Poly Composition(int variable, Poly value)
        {
            AssertSameCoefficientRingWith(value);
            return AsUnivariate(variable).Evaluate(value);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to all except specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables to exclude</param>
        /// <returns>skeleton of this poly with respect to all except specified {@code variables}</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect to specified {@code variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to test</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to specified {@code
        ///         variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect all except specified {@code
        /// variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to exclude</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to all except specified
        ///         {@code variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Gives partial derivative with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>partial derivative with respect to specified variable</returns>
        /// <summary>
        /// Gives partial derivative of specified {@code order} with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>partial derivative of specified {@code order} with respect to specified variable</returns>
        /// <summary>
        /// Gives (unevaluated) coefficient of Taylor series expansion for specified variable that is {@code derivative(poly,
        /// variable, order) / order! }, where the derivative is formal derivative and calculated with arithmetic performed
        /// in Z ring (to overcome possible zeros in Zp).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>{@code derivative(poly, variable, order) / order! }, where the derivative is formal derivative and
        ///         calculated with arithmetic performed in Z ring (to overcome possible zeros in Zp)</returns>
        /// <summary>
        /// Substitutes {@code 0} for {@code variable} (new instance created).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for {@code variable}</returns>
        /// <summary>
        /// Substitutes {@code 0} for all specified {@code variables} (new instance created).
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for all specified {@code variables}</returns>
        /// <summary>
        /// Gives the derivative vector
        /// </summary>
        /// <returns>derivative vector</returns>
        /// <summary>
        /// Consider coefficients of this as constant polynomials of the same type as a given factory polynomial
        /// </summary>
        /// <param name="factory">factory polynomial</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="uRing">ring of univariate polynomials</param>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomial instead of specified variable (that is {@code this(x_1, ..., value, ..., x_N)},
        /// where value is on the place of specified variable)
        /// </summary>
        /// <summary>
        /// Substitutes given polynomial instead of specified variable (that is {@code this(x_1, ..., value, ..., x_N)},
        /// where value is on the place of specified variable)
        /// </summary>
        public Poly Composition(int[] variables, Poly[] values)
        {
            if (variables.Length == 0)
                throw new ArgumentException();
            if (variables.Length != values.Length)
                throw new ArgumentException();
            AssertSameCoefficientRingWith(values[0]);
            variables = variables.Clone();
            values = values.Clone();
            ArraysUtil.QuickSort(variables, values);

            // R[variables][other_variables] => R[other_variables][variables]
            int[] mainVariables = ArraysUtil.IntSetDifference(ArraysUtil.Sequence(0, nVariables), variables);
            MultivariatePolynomial<Poly> r = AsOverMultivariate(mainVariables).Evaluate(variables, values);
            return r.Cc();
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to all except specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables to exclude</param>
        /// <returns>skeleton of this poly with respect to all except specified {@code variables}</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect to specified {@code variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to test</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to specified {@code
        ///         variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect all except specified {@code
        /// variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to exclude</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to all except specified
        ///         {@code variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Gives partial derivative with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>partial derivative with respect to specified variable</returns>
        /// <summary>
        /// Gives partial derivative of specified {@code order} with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>partial derivative of specified {@code order} with respect to specified variable</returns>
        /// <summary>
        /// Gives (unevaluated) coefficient of Taylor series expansion for specified variable that is {@code derivative(poly,
        /// variable, order) / order! }, where the derivative is formal derivative and calculated with arithmetic performed
        /// in Z ring (to overcome possible zeros in Zp).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>{@code derivative(poly, variable, order) / order! }, where the derivative is formal derivative and
        ///         calculated with arithmetic performed in Z ring (to overcome possible zeros in Zp)</returns>
        /// <summary>
        /// Substitutes {@code 0} for {@code variable} (new instance created).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for {@code variable}</returns>
        /// <summary>
        /// Substitutes {@code 0} for all specified {@code variables} (new instance created).
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for all specified {@code variables}</returns>
        /// <summary>
        /// Gives the derivative vector
        /// </summary>
        /// <returns>derivative vector</returns>
        /// <summary>
        /// Consider coefficients of this as constant polynomials of the same type as a given factory polynomial
        /// </summary>
        /// <param name="factory">factory polynomial</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="uRing">ring of univariate polynomials</param>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomial instead of specified variable (that is {@code this(x_1, ..., value, ..., x_N)},
        /// where value is on the place of specified variable)
        /// </summary>
        /// <summary>
        /// Substitutes given polynomial instead of specified variable (that is {@code this(x_1, ..., value, ..., x_N)},
        /// where value is on the place of specified variable)
        /// </summary>
        // R[variables][other_variables] => R[other_variables][variables]
        public virtual bool Equals(object o)
        {
            if (this == o)
                return true;
            if (o == null || GetType() != o.GetType())
                return false;
            AMultivariatePolynomial<?, ?> that = (AMultivariatePolynomial<?, ?>)o;
            if (nVariables != that.nVariables)
                return false;
            return terms.Equals(that.terms);
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to all except specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables to exclude</param>
        /// <returns>skeleton of this poly with respect to all except specified {@code variables}</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect to specified {@code variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to test</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to specified {@code
        ///         variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect all except specified {@code
        /// variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to exclude</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to all except specified
        ///         {@code variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Gives partial derivative with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>partial derivative with respect to specified variable</returns>
        /// <summary>
        /// Gives partial derivative of specified {@code order} with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>partial derivative of specified {@code order} with respect to specified variable</returns>
        /// <summary>
        /// Gives (unevaluated) coefficient of Taylor series expansion for specified variable that is {@code derivative(poly,
        /// variable, order) / order! }, where the derivative is formal derivative and calculated with arithmetic performed
        /// in Z ring (to overcome possible zeros in Zp).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>{@code derivative(poly, variable, order) / order! }, where the derivative is formal derivative and
        ///         calculated with arithmetic performed in Z ring (to overcome possible zeros in Zp)</returns>
        /// <summary>
        /// Substitutes {@code 0} for {@code variable} (new instance created).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for {@code variable}</returns>
        /// <summary>
        /// Substitutes {@code 0} for all specified {@code variables} (new instance created).
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for all specified {@code variables}</returns>
        /// <summary>
        /// Gives the derivative vector
        /// </summary>
        /// <returns>derivative vector</returns>
        /// <summary>
        /// Consider coefficients of this as constant polynomials of the same type as a given factory polynomial
        /// </summary>
        /// <param name="factory">factory polynomial</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="uRing">ring of univariate polynomials</param>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomial instead of specified variable (that is {@code this(x_1, ..., value, ..., x_N)},
        /// where value is on the place of specified variable)
        /// </summary>
        /// <summary>
        /// Substitutes given polynomial instead of specified variable (that is {@code this(x_1, ..., value, ..., x_N)},
        /// where value is on the place of specified variable)
        /// </summary>
        // R[variables][other_variables] => R[other_variables][variables]
        public virtual int GetHashCode()
        {
            return terms.GetHashCode();
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to all except specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables to exclude</param>
        /// <returns>skeleton of this poly with respect to all except specified {@code variables}</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect to specified {@code variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to test</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to specified {@code
        ///         variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect all except specified {@code
        /// variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to exclude</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to all except specified
        ///         {@code variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Gives partial derivative with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>partial derivative with respect to specified variable</returns>
        /// <summary>
        /// Gives partial derivative of specified {@code order} with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>partial derivative of specified {@code order} with respect to specified variable</returns>
        /// <summary>
        /// Gives (unevaluated) coefficient of Taylor series expansion for specified variable that is {@code derivative(poly,
        /// variable, order) / order! }, where the derivative is formal derivative and calculated with arithmetic performed
        /// in Z ring (to overcome possible zeros in Zp).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>{@code derivative(poly, variable, order) / order! }, where the derivative is formal derivative and
        ///         calculated with arithmetic performed in Z ring (to overcome possible zeros in Zp)</returns>
        /// <summary>
        /// Substitutes {@code 0} for {@code variable} (new instance created).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for {@code variable}</returns>
        /// <summary>
        /// Substitutes {@code 0} for all specified {@code variables} (new instance created).
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for all specified {@code variables}</returns>
        /// <summary>
        /// Gives the derivative vector
        /// </summary>
        /// <returns>derivative vector</returns>
        /// <summary>
        /// Consider coefficients of this as constant polynomials of the same type as a given factory polynomial
        /// </summary>
        /// <param name="factory">factory polynomial</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="uRing">ring of univariate polynomials</param>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomial instead of specified variable (that is {@code this(x_1, ..., value, ..., x_N)},
        /// where value is on the place of specified variable)
        /// </summary>
        /// <summary>
        /// Substitutes given polynomial instead of specified variable (that is {@code this(x_1, ..., value, ..., x_N)},
        /// where value is on the place of specified variable)
        /// </summary>
        // R[variables][other_variables] => R[other_variables][variables]
        public virtual int SkeletonHashCode()
        {
            return terms.SkeletonHashCode();
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to all except specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables to exclude</param>
        /// <returns>skeleton of this poly with respect to all except specified {@code variables}</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect to specified {@code variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to test</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to specified {@code
        ///         variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect all except specified {@code
        /// variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to exclude</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to all except specified
        ///         {@code variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Gives partial derivative with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>partial derivative with respect to specified variable</returns>
        /// <summary>
        /// Gives partial derivative of specified {@code order} with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>partial derivative of specified {@code order} with respect to specified variable</returns>
        /// <summary>
        /// Gives (unevaluated) coefficient of Taylor series expansion for specified variable that is {@code derivative(poly,
        /// variable, order) / order! }, where the derivative is formal derivative and calculated with arithmetic performed
        /// in Z ring (to overcome possible zeros in Zp).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>{@code derivative(poly, variable, order) / order! }, where the derivative is formal derivative and
        ///         calculated with arithmetic performed in Z ring (to overcome possible zeros in Zp)</returns>
        /// <summary>
        /// Substitutes {@code 0} for {@code variable} (new instance created).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for {@code variable}</returns>
        /// <summary>
        /// Substitutes {@code 0} for all specified {@code variables} (new instance created).
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for all specified {@code variables}</returns>
        /// <summary>
        /// Gives the derivative vector
        /// </summary>
        /// <returns>derivative vector</returns>
        /// <summary>
        /// Consider coefficients of this as constant polynomials of the same type as a given factory polynomial
        /// </summary>
        /// <param name="factory">factory polynomial</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="uRing">ring of univariate polynomials</param>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomial instead of specified variable (that is {@code this(x_1, ..., value, ..., x_N)},
        /// where value is on the place of specified variable)
        /// </summary>
        /// <summary>
        /// Substitutes given polynomial instead of specified variable (that is {@code this(x_1, ..., value, ..., x_N)},
        /// where value is on the place of specified variable)
        /// </summary>
        // R[variables][other_variables] => R[other_variables][variables]
        public abstract Poly Clone();
        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to all except specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables to exclude</param>
        /// <returns>skeleton of this poly with respect to all except specified {@code variables}</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect to specified {@code variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to test</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to specified {@code
        ///         variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect all except specified {@code
        /// variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to exclude</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to all except specified
        ///         {@code variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Gives partial derivative with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>partial derivative with respect to specified variable</returns>
        /// <summary>
        /// Gives partial derivative of specified {@code order} with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>partial derivative of specified {@code order} with respect to specified variable</returns>
        /// <summary>
        /// Gives (unevaluated) coefficient of Taylor series expansion for specified variable that is {@code derivative(poly,
        /// variable, order) / order! }, where the derivative is formal derivative and calculated with arithmetic performed
        /// in Z ring (to overcome possible zeros in Zp).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>{@code derivative(poly, variable, order) / order! }, where the derivative is formal derivative and
        ///         calculated with arithmetic performed in Z ring (to overcome possible zeros in Zp)</returns>
        /// <summary>
        /// Substitutes {@code 0} for {@code variable} (new instance created).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for {@code variable}</returns>
        /// <summary>
        /// Substitutes {@code 0} for all specified {@code variables} (new instance created).
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for all specified {@code variables}</returns>
        /// <summary>
        /// Gives the derivative vector
        /// </summary>
        /// <returns>derivative vector</returns>
        /// <summary>
        /// Consider coefficients of this as constant polynomials of the same type as a given factory polynomial
        /// </summary>
        /// <param name="factory">factory polynomial</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="uRing">ring of univariate polynomials</param>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomial instead of specified variable (that is {@code this(x_1, ..., value, ..., x_N)},
        /// where value is on the place of specified variable)
        /// </summary>
        /// <summary>
        /// Substitutes given polynomial instead of specified variable (that is {@code this(x_1, ..., value, ..., x_N)},
        /// where value is on the place of specified variable)
        /// </summary>
        // R[variables][other_variables] => R[other_variables][variables]
        /// <summary>
        /// Evaluates {@code poly} at random point
        /// </summary>
        public abstract Poly EvaluateAtRandom(int variable, RandomGenerator rnd);
        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to all except specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables to exclude</param>
        /// <returns>skeleton of this poly with respect to all except specified {@code variables}</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect to specified {@code variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to test</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to specified {@code
        ///         variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect all except specified {@code
        /// variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to exclude</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to all except specified
        ///         {@code variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Gives partial derivative with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>partial derivative with respect to specified variable</returns>
        /// <summary>
        /// Gives partial derivative of specified {@code order} with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>partial derivative of specified {@code order} with respect to specified variable</returns>
        /// <summary>
        /// Gives (unevaluated) coefficient of Taylor series expansion for specified variable that is {@code derivative(poly,
        /// variable, order) / order! }, where the derivative is formal derivative and calculated with arithmetic performed
        /// in Z ring (to overcome possible zeros in Zp).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>{@code derivative(poly, variable, order) / order! }, where the derivative is formal derivative and
        ///         calculated with arithmetic performed in Z ring (to overcome possible zeros in Zp)</returns>
        /// <summary>
        /// Substitutes {@code 0} for {@code variable} (new instance created).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for {@code variable}</returns>
        /// <summary>
        /// Substitutes {@code 0} for all specified {@code variables} (new instance created).
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for all specified {@code variables}</returns>
        /// <summary>
        /// Gives the derivative vector
        /// </summary>
        /// <returns>derivative vector</returns>
        /// <summary>
        /// Consider coefficients of this as constant polynomials of the same type as a given factory polynomial
        /// </summary>
        /// <param name="factory">factory polynomial</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="uRing">ring of univariate polynomials</param>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomial instead of specified variable (that is {@code this(x_1, ..., value, ..., x_N)},
        /// where value is on the place of specified variable)
        /// </summary>
        /// <summary>
        /// Substitutes given polynomial instead of specified variable (that is {@code this(x_1, ..., value, ..., x_N)},
        /// where value is on the place of specified variable)
        /// </summary>
        // R[variables][other_variables] => R[other_variables][variables]
        /// <summary>
        /// Evaluates {@code poly} at random point
        /// </summary>
        /// <summary>
        /// Evaluates {@code poly} at random point chosen in such way that the skeleton of evaluated version is the same as
        /// of the original {@code poly} with respect to all except {@code variable} variables
        /// </summary>
        public abstract Poly EvaluateAtRandomPreservingSkeleton(int variable, RandomGenerator rnd);
        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to all except specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables to exclude</param>
        /// <returns>skeleton of this poly with respect to all except specified {@code variables}</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect to specified {@code variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to test</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to specified {@code
        ///         variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect all except specified {@code
        /// variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to exclude</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to all except specified
        ///         {@code variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Gives partial derivative with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>partial derivative with respect to specified variable</returns>
        /// <summary>
        /// Gives partial derivative of specified {@code order} with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>partial derivative of specified {@code order} with respect to specified variable</returns>
        /// <summary>
        /// Gives (unevaluated) coefficient of Taylor series expansion for specified variable that is {@code derivative(poly,
        /// variable, order) / order! }, where the derivative is formal derivative and calculated with arithmetic performed
        /// in Z ring (to overcome possible zeros in Zp).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>{@code derivative(poly, variable, order) / order! }, where the derivative is formal derivative and
        ///         calculated with arithmetic performed in Z ring (to overcome possible zeros in Zp)</returns>
        /// <summary>
        /// Substitutes {@code 0} for {@code variable} (new instance created).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for {@code variable}</returns>
        /// <summary>
        /// Substitutes {@code 0} for all specified {@code variables} (new instance created).
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for all specified {@code variables}</returns>
        /// <summary>
        /// Gives the derivative vector
        /// </summary>
        /// <returns>derivative vector</returns>
        /// <summary>
        /// Consider coefficients of this as constant polynomials of the same type as a given factory polynomial
        /// </summary>
        /// <param name="factory">factory polynomial</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="uRing">ring of univariate polynomials</param>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomial instead of specified variable (that is {@code this(x_1, ..., value, ..., x_N)},
        /// where value is on the place of specified variable)
        /// </summary>
        /// <summary>
        /// Substitutes given polynomial instead of specified variable (that is {@code this(x_1, ..., value, ..., x_N)},
        /// where value is on the place of specified variable)
        /// </summary>
        // R[variables][other_variables] => R[other_variables][variables]
        /// <summary>
        /// Evaluates {@code poly} at random point
        /// </summary>
        /// <summary>
        /// Evaluates {@code poly} at random point chosen in such way that the skeleton of evaluated version is the same as
        /// of the original {@code poly} with respect to all except {@code variable} variables
        /// </summary>
        public abstract MultivariatePolynomial<E> MapCoefficientsAsPolys<E>(Ring<E> ring, Function<Poly, E> mapper);
        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to all except specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables to exclude</param>
        /// <returns>skeleton of this poly with respect to all except specified {@code variables}</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect to specified {@code variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to test</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to specified {@code
        ///         variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect all except specified {@code
        /// variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to exclude</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to all except specified
        ///         {@code variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Gives partial derivative with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>partial derivative with respect to specified variable</returns>
        /// <summary>
        /// Gives partial derivative of specified {@code order} with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>partial derivative of specified {@code order} with respect to specified variable</returns>
        /// <summary>
        /// Gives (unevaluated) coefficient of Taylor series expansion for specified variable that is {@code derivative(poly,
        /// variable, order) / order! }, where the derivative is formal derivative and calculated with arithmetic performed
        /// in Z ring (to overcome possible zeros in Zp).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>{@code derivative(poly, variable, order) / order! }, where the derivative is formal derivative and
        ///         calculated with arithmetic performed in Z ring (to overcome possible zeros in Zp)</returns>
        /// <summary>
        /// Substitutes {@code 0} for {@code variable} (new instance created).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for {@code variable}</returns>
        /// <summary>
        /// Substitutes {@code 0} for all specified {@code variables} (new instance created).
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for all specified {@code variables}</returns>
        /// <summary>
        /// Gives the derivative vector
        /// </summary>
        /// <returns>derivative vector</returns>
        /// <summary>
        /// Consider coefficients of this as constant polynomials of the same type as a given factory polynomial
        /// </summary>
        /// <param name="factory">factory polynomial</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="uRing">ring of univariate polynomials</param>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomial instead of specified variable (that is {@code this(x_1, ..., value, ..., x_N)},
        /// where value is on the place of specified variable)
        /// </summary>
        /// <summary>
        /// Substitutes given polynomial instead of specified variable (that is {@code this(x_1, ..., value, ..., x_N)},
        /// where value is on the place of specified variable)
        /// </summary>
        // R[variables][other_variables] => R[other_variables][variables]
        /// <summary>
        /// Evaluates {@code poly} at random point
        /// </summary>
        /// <summary>
        /// Evaluates {@code poly} at random point chosen in such way that the skeleton of evaluated version is the same as
        /// of the original {@code poly} with respect to all except {@code variable} variables
        /// </summary>
        /// <summary>
        /// Collector which collects stream of element to a UnivariatePolynomial
        /// </summary>
        public sealed class PolynomialCollector<Term, Poly> : Collector<Term, Poly, Poly>
        {
            readonly Supplier<Poly> supplier;
            readonly BiConsumer<Poly, Term> accumulator = Poly.Add();
            readonly BinaryOperator<Poly> combiner = (l, r) =>
            {
                l.Add(r);
                return l;
            };
            readonly Function<Poly, Poly> finisher = Function.Identity();
            public PolynomialCollector(Supplier<Poly> supplier)
            {
                this.supplier = supplier;
            }

            public Supplier<Poly> Supplier()
            {
                return supplier;
            }

            public BiConsumer<Poly, Term> Accumulator()
            {
                return accumulator;
            }

            public BinaryOperator<Poly> Combiner()
            {
                return combiner;
            }

            public Function<Poly, Poly> Finisher()
            {
                return finisher;
            }

            public HashSet<Characteristics> Characteristics()
            {
                return EnumSet.Of(Characteristics.IDENTITY_FINISH);
            }
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to all except specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables to exclude</param>
        /// <returns>skeleton of this poly with respect to all except specified {@code variables}</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect to specified {@code variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to test</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to specified {@code
        ///         variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect all except specified {@code
        /// variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to exclude</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to all except specified
        ///         {@code variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Gives partial derivative with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>partial derivative with respect to specified variable</returns>
        /// <summary>
        /// Gives partial derivative of specified {@code order} with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>partial derivative of specified {@code order} with respect to specified variable</returns>
        /// <summary>
        /// Gives (unevaluated) coefficient of Taylor series expansion for specified variable that is {@code derivative(poly,
        /// variable, order) / order! }, where the derivative is formal derivative and calculated with arithmetic performed
        /// in Z ring (to overcome possible zeros in Zp).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>{@code derivative(poly, variable, order) / order! }, where the derivative is formal derivative and
        ///         calculated with arithmetic performed in Z ring (to overcome possible zeros in Zp)</returns>
        /// <summary>
        /// Substitutes {@code 0} for {@code variable} (new instance created).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for {@code variable}</returns>
        /// <summary>
        /// Substitutes {@code 0} for all specified {@code variables} (new instance created).
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for all specified {@code variables}</returns>
        /// <summary>
        /// Gives the derivative vector
        /// </summary>
        /// <returns>derivative vector</returns>
        /// <summary>
        /// Consider coefficients of this as constant polynomials of the same type as a given factory polynomial
        /// </summary>
        /// <param name="factory">factory polynomial</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="uRing">ring of univariate polynomials</param>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomial instead of specified variable (that is {@code this(x_1, ..., value, ..., x_N)},
        /// where value is on the place of specified variable)
        /// </summary>
        /// <summary>
        /// Substitutes given polynomial instead of specified variable (that is {@code this(x_1, ..., value, ..., x_N)},
        /// where value is on the place of specified variable)
        /// </summary>
        // R[variables][other_variables] => R[other_variables][variables]
        /// <summary>
        /// Evaluates {@code poly} at random point
        /// </summary>
        /// <summary>
        /// Evaluates {@code poly} at random point chosen in such way that the skeleton of evaluated version is the same as
        /// of the original {@code poly} with respect to all except {@code variable} variables
        /// </summary>
        /// <summary>
        /// Collector which collects stream of element to a UnivariatePolynomial
        /// </summary>
        public string ToString()
        {
            return ToString(IStringifier.Dummy());
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to all except specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables to exclude</param>
        /// <returns>skeleton of this poly with respect to all except specified {@code variables}</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect to specified {@code variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to test</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to specified {@code
        ///         variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect all except specified {@code
        /// variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to exclude</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to all except specified
        ///         {@code variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Gives partial derivative with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>partial derivative with respect to specified variable</returns>
        /// <summary>
        /// Gives partial derivative of specified {@code order} with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>partial derivative of specified {@code order} with respect to specified variable</returns>
        /// <summary>
        /// Gives (unevaluated) coefficient of Taylor series expansion for specified variable that is {@code derivative(poly,
        /// variable, order) / order! }, where the derivative is formal derivative and calculated with arithmetic performed
        /// in Z ring (to overcome possible zeros in Zp).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>{@code derivative(poly, variable, order) / order! }, where the derivative is formal derivative and
        ///         calculated with arithmetic performed in Z ring (to overcome possible zeros in Zp)</returns>
        /// <summary>
        /// Substitutes {@code 0} for {@code variable} (new instance created).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for {@code variable}</returns>
        /// <summary>
        /// Substitutes {@code 0} for all specified {@code variables} (new instance created).
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for all specified {@code variables}</returns>
        /// <summary>
        /// Gives the derivative vector
        /// </summary>
        /// <returns>derivative vector</returns>
        /// <summary>
        /// Consider coefficients of this as constant polynomials of the same type as a given factory polynomial
        /// </summary>
        /// <param name="factory">factory polynomial</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="uRing">ring of univariate polynomials</param>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomial instead of specified variable (that is {@code this(x_1, ..., value, ..., x_N)},
        /// where value is on the place of specified variable)
        /// </summary>
        /// <summary>
        /// Substitutes given polynomial instead of specified variable (that is {@code this(x_1, ..., value, ..., x_N)},
        /// where value is on the place of specified variable)
        /// </summary>
        // R[variables][other_variables] => R[other_variables][variables]
        /// <summary>
        /// Evaluates {@code poly} at random point
        /// </summary>
        /// <summary>
        /// Evaluates {@code poly} at random point chosen in such way that the skeleton of evaluated version is the same as
        /// of the original {@code poly} with respect to all except {@code variable} variables
        /// </summary>
        /// <summary>
        /// Collector which collects stream of element to a UnivariatePolynomial
        /// </summary>
        static long[] KroneckerMap(int[] degrees)
        {
            long[] result = new long[degrees.Length];
            result[0] = 1;
            for (int i = 1; i < degrees.Length; i++)
            {
                result[i] = 1;
                double check = 1;
                for (int j = 0; j < i; j++)
                {
                    long b = 2 * degrees[j] + 1;
                    result[i] *= b;
                    check *= b;
                }

                if (check > Long.MAX_VALUE)
                {

                    // long overflow -> can't use Kronecker's trick
                    return null;
                }
            }

            return result;
        }

        /// <summary>
        /// The number of variables
        /// </summary>
        /// <summary>
        /// The ordering
        /// </summary>
        /// <summary>
        /// Monomial algebra
        /// </summary>
        /// <summary>
        /// the actual data
        /// </summary>
        /// <summary>
        /// Renames variable {@code i} to {@code j} and {@code j} to {@code i} (new instance created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="i">the first variable</param>
        /// <param name="j">the second variable</param>
        /// <returns>polynomial with variable {@code i} renamed to {@code j} and {@code j} renamed to {@code i}</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed polynomial</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="e">the term</param>
        /// <param name="newVariables">the new variables</param>
        /// <returns>renamed term</returns>
        /// <summary>
        /// Rename variables from [0,1,...N] to [newVariables[0], newVariables[1], ..., newVariables[N]] (new instance
        /// created)
        /// </summary>
        /// <param name="poly">the polynomial</param>
        /// <param name="newVariables">the new variables</param>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>renamed polynomial</returns>
        // NOTE: always return a copy of poly, even if order of variables is unchanged
        /// <summary>
        /// Converts univariate polynomial to multivariate. Example:
        /// <pre>
        /// <code>//convert (x^2 + 1) in Z[x] to multivariate polynomial (c^2 + 1) in Z[a,b,c]
        /// multivarPoly = asMultivariate(univarPoly, 3, 2, MonomialOrder.LEX)
        /// </code>
        /// </pre>
        /// </summary>
        /// <param name="poly">the univariate polynomial</param>
        /// <param name="nVariables">the total number of variables in the result</param>
        /// <param name="variable">the univariate variable</param>
        /// <param name="ordering">the term order</param>
        /// <param name="<Term>">desired terms type</param>
        /// <param name="<Poly>">desired polynomial type</param>
        /// <returns>the multivariate polynomial</returns>
        /// <summary>
        /// Converts this to univariate polynomial or throws exception if conversion is impossible (more than one variable
        /// have non zero exponents)
        /// </summary>
        /// <returns>univariate polynomial</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /* private factory */
        /* private factory */
        /* private factory */
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this from the list of monomials
        /// </summary>
        /// <param name="terms">the monomials</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single constant element taken from given
        /// monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates multivariate polynomial over the same ring as this with the single monomial
        /// </summary>
        /// <param name="term">the monomial</param>
        /// <returns>multivariate polynomial</returns>
        /// <summary>
        /// Creates monomial over the same ring as this of the form {@code variable ^ degree}
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="degree">the monomial degree</param>
        /// <returns>monomial {@code variable ^ degree}</returns>
        /// <summary>
        /// Makes a copy of this with the new ordering {@code newOrdering}
        /// </summary>
        /// <param name="newOrdering">the new ordering</param>
        /// <returns>a copy of this with the new ordering</returns>
        /// <summary>
        /// release caches
        /// </summary>
        /// <summary>
        /// Returns the number of terms in this polynomial
        /// </summary>
        /// <returns>the number of terms</returns>
        /// <summary>
        /// Returns whether this is a plain variable (with no coefficient)
        /// </summary>
        /// <summary>
        /// Makes a copy of this with the specified variable dropped
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this with the specified variable replaced with the unit
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this with all variables except specified ones replaced with the units
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <summary>
        /// Makes a copy of this by inserting new variable (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <summary>
        /// Makes a copy of this by inserting new variables (the indexes will be shifted)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="count">length of the insertion</param>
        /// <summary>
        /// auxiliary method
        /// </summary>
        /// <summary>
        /// Renames old variables to new according to mapping
        /// </summary>
        /// <param name="mapping">mapping from old variables to new variables</param>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + 1}
        /// </summary>
        /// <returns>a copy of this with one additional (last) variable added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// Returns a copy of this with {@code nVariables = nVariables + m}
        /// </summary>
        /// <returns>a copy of this with n additional (last) variables added</returns>
        /// <remarks>@see#insertVariable(int)</remarks>
        /// <summary>
        /// internal API
        /// </summary>
        /// <summary>
        /// Returns the number of really used variables (those which are not units)
        /// </summary>
        /// <returns>the number of variables (those which are not units)</returns>
        /// <summary>
        /// cached degree()
        /// </summary>
        /// <summary>
        /// Returns the total degree of this polynomial, that is the maximal total degree among all terms
        /// </summary>
        /// <returns>the total degree of this polynomial, that is the maximal total degree among all terms</returns>
        // fixme replace with degreeSum ?
        /// <summary>
        /// Gives the degree in specified variables
        /// </summary>
        /// <summary>
        /// Returns the maximal degree of variables in this polynomial
        /// </summary>
        /// <returns>the maximal degree of variables in this polynomial</returns>
        /// <summary>
        /// Returns the degree of this polynomial with respect to specified variable
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the degree of this polynomial with respect to specified variable</returns>
        /// <summary>
        /// cached degrees
        /// </summary>
        /// <summary>
        /// returns reference (content must not be modified)
        /// </summary>
        /// <summary>
        /// Returns an array of degrees of all variables, so that is i-th element of the result is the polynomial degree with
        /// respect to i-th variable
        /// </summary>
        /// <returns>array of degrees</returns>
        /// <summary>
        /// Returns the array where i-th element is a number of monomials that contain i-th variable
        /// </summary>
        /// <summary>
        /// Returns the array where i-th element is a number of unique degrees of i-th variable
        /// </summary>
        /// <summary>
        /// Returns the multidegree of this polynomial i.e. exponents of the leading term (without copying)
        /// </summary>
        /// <returns>the multidegree of this polynomial i.e. exponents of the leading term (without copying)</returns>
        /// <summary>
        /// Returns the array of exponents in which {@code variable} occurs in this polynomial
        /// </summary>
        /// <returns>the array of exponents in which {@code variable} occurs in this polynomial</returns>
        /// <summary>
        /// Returns the sum of {@link #degrees()}
        /// </summary>
        /// <returns>sum of {@link #degrees()}</returns>
        /// <summary>
        /// Returns the total degree, that is sum of {@link #degrees()}
        /// </summary>
        /// <summary>
        /// Sparsity level: size / (product of degrees)
        /// </summary>
        /// <summary>
        /// Sparsity level: {@code size / nDenseTerms} where nDenseTerms is a total number of possible distinct terms with
        /// total degree not larger than distinct total degrees presented in this.
        /// </summary>
        /// <summary>
        /// Returns degreeSum - lt().totalDegree
        /// </summary>
        /// <summary>
        /// Returns whether all terms have the same total degree
        /// </summary>
        /// <summary>
        /// Homogenize poly by adding new (homogenizing) variable
        /// </summary>
        /// <param name="variable">variable that will be inserted (homogenization variable)</param>
        /// <summary>
        /// Returns whether this poly is effectively univariate (not more than one variable is non-unit)
        /// </summary>
        /// <returns>whether this poly is effectively univariate</returns>
        /// <summary>
        /// Returns -1 if this poly is not effectively univariate or variable in which it is univariate
        /// </summary>
        /// <returns>-1 if this poly is not effectively univariate or variable in which it is univariate</returns>
        /// <summary>
        /// Returns a coefficient before {@code variable^exponent} as a multivariate polynomial
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>coefficient before {@code variable^exponent} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Returns a coefficient before {@code variables^exponents} as a multivariate polynomial and drops all such terms
        /// from this
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <param name="exponents">the exponents</param>
        /// <returns>coefficient before {@code variables^exponents} as a multivariate polynomial</returns>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// Converts this polynomial to a univariate polynomial over specified variable with the multivariate coefficient
        /// ring.
        /// </summary>
        /// <param name="variable">variable which will be treated as univariate variable</param>
        /// <returns>univariate polynomial over the ring of multivariate coefficients</returns>
        /// <exception cref="IllegalArgumentException">if this is not effectively a univariate polynomial</exception>
        /// <summary>
        /// </summary>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable}
        /// </summary>
        /// <param name="variable">variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being univariate polynomials over {@code variable},
        /// the resulting polynomial have (nVariable - 1) multivariate variables (specified {@code variable} is eliminated)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate polynomial with coefficients being univariate polynomials over {@code variable}, the
        ///         resulting polynomial have (nVariable - 1) multivariate variables</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Converts this to a multivariate polynomial with coefficients being multivariate polynomials polynomials over
        /// {@code variables} that is polynomial in R[variables][other_variables]
        /// </summary>
        /// <param name="variables">the variables to separate</param>
        /// <param name="ordering">monomial order to use for result</param>
        /// <returns>multivariate polynomial with coefficients being multivariate polynomials polynomials over {@code
        ///         variables} that is polynomial in R[variables][other_variables]</returns>
        /// <summary>
        /// Convert univariate polynomial over multivariate polynomials to a normal multivariate poly
        /// </summary>
        /// <param name="uPoly">univariate polynomial over multivariate polynomials</param>
        /// <param name="variable">the univariate variable</param>
        /// <returns>multivariate poly</returns>
        /// <summary>
        /// Gives primitive part of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>primitive part of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Make this poly monic considering leading term with respect to given ordering
        /// </summary>
        /// <summary>
        /// Sets {@code this} to its monic part multiplied by the leading coefficient of {@code other} with respect to given
        /// ordering
        /// </summary>
        /// <summary>
        /// Gives the content of this considered as R[variable][other_variables]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[variable][other_variables]</returns>
        /// <summary>
        /// Gives the content of this considered as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>the content of this considered as R[other_variables][variable]</returns>
        /// <summary>
        /// Multiplies this by variable^exponent
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="exponent">the exponent</param>
        /// <returns>this multiplied by variable^exponent</returns>
        /// <summary>
        /// Returns the leading coefficient of this viewed as R[other_variables][variable]
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>multivariate leading coefficient of this viewed as R[other_variables][variable]</returns>
        /// <summary>
        /// Set the leading coefficient of specified variable to a specified value (this is considered as
        /// R[other_variables][variable])
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="lc">the leading coefficient of this viewed as R[other_variables][variable]</param>
        /// <summary>
        /// Returns the leading term in this polynomial according to specified ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to specified ordering</returns>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the minimal term in this polynomial according to ordering
        /// </summary>
        /// <returns>the minimal term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the leading coefficient with respect to specified ordering as a constant poly
        /// </summary>
        /// <summary>
        /// Returns the leading term in this polynomial according to ordering
        /// </summary>
        /// <returns>the leading term in this polynomial according to ordering</returns>
        /// <summary>
        /// Returns the monomial content of this polynomial
        /// </summary>
        /// <returns>the monomial content of this polynomial</returns>
        /// <summary>
        /// Returns common content of {@code this} and {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>common monomial factor of {@code this} and {@code monomial}</returns>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// check whether number of variables is the same
        /// </summary>
        /// <summary>
        /// Divides this polynomial by a {@code monomial} or returns {@code null} (causing loss of internal data) if some of
        /// the elements can't be exactly divided by the {@code monomial}. NOTE: if {@code null} is returned, the content of
        /// {@code this} is destroyed.
        /// </summary>
        /// <param name="monomial">monomial degrees</param>
        /// <returns>{@code this} divided by the {@code factor * monomial} or {@code null}</returns>
        /// <summary>
        /// add term to polynomial represented as terms
        /// </summary>
        /// <summary>
        /// subtract term from polynomial represented as terms
        /// </summary>
        /// <summary>
        /// Subtracts {@code cf * oth} from this polynomial
        /// </summary>
        /// <summary>
        /// Adds {@code monomial} to this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this + monomial}</returns>
        /// <summary>
        /// Puts {@code monomial} to this polynomial replacing the previous entry if was
        /// </summary>
        /// <summary>
        /// Subtracts {@code monomial} from this polynomial
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code this - monomial}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Adds monomials to this polynomial
        /// </summary>
        /// <param name="monomials">terms</param>
        /// <returns>{@code this + monomials}</returns>
        /// <summary>
        /// Removes the leading term from this polynomial
        /// </summary>
        /// <returns>this - this.lt()</returns>
        // todo rename to tail
        // todo move to IPolynomial
        /// <summary>
        /// Multiplies {@code this} by the {@code monomial}
        /// </summary>
        /// <param name="monomial">the monomial</param>
        /// <returns>{@code} this multiplied by the {@code monomial}</returns>
        /// <summary>
        /// Multiplies {@code this} by the degree vector
        /// </summary>
        /// <param name="dv">the degree vector</param>
        /// <returns>{@code} this multiplied by the degree vector</returns>
        /// <summary>
        /// Returns skeleton of this poly
        /// </summary>
        /// <returns>skeleton of this poly</returns>
        /// <summary>
        /// Set all coefficients to units
        /// </summary>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>skeleton of this poly with respect to specified {@code variables}</returns>
        /// <summary>
        /// Returns skeleton of this poly with respect to all except specified {@code variables}
        /// </summary>
        /// <param name="variables">the variables to exclude</param>
        /// <returns>skeleton of this poly with respect to all except specified {@code variables}</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect to specified {@code variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to test</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to specified {@code
        ///         variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Tests whether {@code this} and {@code oth} have the same skeleton with respect all except specified {@code
        /// variables}
        /// </summary>
        /// <param name="oth">other multivariate polynomial</param>
        /// <param name="variables">variables to exclude</param>
        /// <returns>{@code true} if {@code this} and {@code oth} have the same skeleton with respect to all except specified
        ///         {@code variables} and {@code false} otherwise</returns>
        /// <summary>
        /// Gives partial derivative with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>partial derivative with respect to specified variable</returns>
        /// <summary>
        /// Gives partial derivative of specified {@code order} with respect to specified variable (new instance created)
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>partial derivative of specified {@code order} with respect to specified variable</returns>
        /// <summary>
        /// Gives (unevaluated) coefficient of Taylor series expansion for specified variable that is {@code derivative(poly,
        /// variable, order) / order! }, where the derivative is formal derivative and calculated with arithmetic performed
        /// in Z ring (to overcome possible zeros in Zp).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <param name="order">derivative order</param>
        /// <returns>{@code derivative(poly, variable, order) / order! }, where the derivative is formal derivative and
        ///         calculated with arithmetic performed in Z ring (to overcome possible zeros in Zp)</returns>
        /// <summary>
        /// Substitutes {@code 0} for {@code variable} (new instance created).
        /// </summary>
        /// <param name="variable">the variable</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for {@code variable}</returns>
        /// <summary>
        /// Substitutes {@code 0} for all specified {@code variables} (new instance created).
        /// </summary>
        /// <param name="variables">the variables</param>
        /// <returns>a new multivariate polynomial with {@code 0} substituted for all specified {@code variables}</returns>
        /// <summary>
        /// Gives the derivative vector
        /// </summary>
        /// <returns>derivative vector</returns>
        /// <summary>
        /// Consider coefficients of this as constant polynomials of the same type as a given factory polynomial
        /// </summary>
        /// <param name="factory">factory polynomial</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="uRing">ring of univariate polynomials</param>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomials instead of variables of this (that is {@code this(values_1, ..., values_N)})
        /// </summary>
        /// <param name="values">polynomial values (may have different nvars from this)</param>
        /// <summary>
        /// Substitutes given polynomial instead of specified variable (that is {@code this(x_1, ..., value, ..., x_N)},
        /// where value is on the place of specified variable)
        /// </summary>
        /// <summary>
        /// Substitutes given polynomial instead of specified variable (that is {@code this(x_1, ..., value, ..., x_N)},
        /// where value is on the place of specified variable)
        /// </summary>
        // R[variables][other_variables] => R[other_variables][variables]
        /// <summary>
        /// Evaluates {@code poly} at random point
        /// </summary>
        /// <summary>
        /// Evaluates {@code poly} at random point chosen in such way that the skeleton of evaluated version is the same as
        /// of the original {@code poly} with respect to all except {@code variable} variables
        /// </summary>
        /// <summary>
        /// Collector which collects stream of element to a UnivariatePolynomial
        /// </summary>
        // long overflow -> can't use Kronecker's trick
        /* shared constant */
        /// <summary>
        /// when to switch to Kronecker's method
        /// </summary>
        static int KRONECKER_THRESHOLD = 256;
    }
}