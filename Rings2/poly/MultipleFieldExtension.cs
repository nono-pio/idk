using Cc.Redberry.Rings;
using Cc.Redberry.Rings.Bigint;
using Cc.Redberry.Rings.Io;
using Cc.Redberry.Rings.Poly;
using Cc.Redberry.Rings.Util;
using Java.Io;
using Java;
using Java.Util.Function;
using Java.Util.Stream;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using static Cc.Redberry.Rings.Poly.RoundingMode;
using static Cc.Redberry.Rings.Poly.Associativity;
using static Cc.Redberry.Rings.Poly.Operator;
using static Cc.Redberry.Rings.Poly.TokenType;
using static Cc.Redberry.Rings.Poly.SystemInfo;

namespace Cc.Redberry.Rings.Poly
{
    /// <summary>
    /// Multiple field extension {@code F(α_1, α_2, ..., α_N)}. Elements are represented as multivariate polynomials over
    /// {@code (α_1, α_2, ..., α_N)}; internally all arithmetic operations are performed by switching to appropriate simple
    /// field extension {@code F(γ)} (accessible via {@link #getSimpleExtension()} method) where {@code γ} is some primitive
    /// element (accessible via {@link #getPrimitiveElement()} method) computed automatically. Representation of generating
    /// algebraic elements {@code α_i} as elements of this simple extension can be obtained via {@link #getGeneratorRep(int)}
    /// method. Originally, generators are represented by their minimal polynomials over {@code F(α_1, α_2, ..., α_i)}
    /// ("tower" representation). To construct multiple field extensions one should use {@link #mkMultipleExtension(...)} and
    /// {@link #joinAlgebraicElement(UnivariatePolynomial)}.
    /// </summary>
    /// <remarks>
    /// @see#mkMultipleExtension(IUnivariatePolynomial)
    /// @see#mkMultipleExtension(IUnivariatePolynomial...)
    /// @see#mkSplittingField(IUnivariatePolynomial)
    /// @seecc.redberry.rings.Rings#MultipleFieldExtension(IUnivariatePolynomial[])
    /// @seecc.redberry.rings.Rings#SplittingField(IUnivariatePolynomial)
    /// @since2.5
    /// </remarks>
    public class MultipleFieldExtension<Term, mPoly, sPoly> : ImageRing<sPoly, mPoly>, IPolynomialRing<mPoly>
    {
        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        readonly mPoly mFactory;
        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        readonly sPoly sFactory;
        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        readonly MultipleFieldExtension<Term, mPoly, sPoly>[] tower;
        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        readonly UnivariatePolynomial<mPoly>[] minimalPolynomialsOfGenerators;
        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        readonly mPoly primitiveElement;
        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        readonly SimpleFieldExtension<sPoly> simpleExtension;
        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        readonly sPoly[] generatorsReps;
        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        public MultipleFieldExtension(MultipleFieldExtension<Term, mPoly, sPoly>[] tower, UnivariatePolynomial<mPoly>[] minimalPolynomialsOfGenerators, mPoly primitiveElement, sPoly[] generatorsReps, SimpleFieldExtension<sPoly> simpleExtension) : base(simpleExtension, new MultipleToSimple(primitiveElement, simpleExtension, generatorsReps), new SimpleToMultiple(primitiveElement, simpleExtension, generatorsReps, tower, minimalPolynomialsOfGenerators))
        {
            this.tower = tower;
            this.minimalPolynomialsOfGenerators = minimalPolynomialsOfGenerators;
            this.primitiveElement = primitiveElement;
            this.simpleExtension = simpleExtension;
            this.generatorsReps = generatorsReps;
            this.mFactory = primitiveElement.CreateOne();
            this.sFactory = simpleExtension.Factory().CreateOne();
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        public override int NVariables()
        {
            return mFactory.nVariables;
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        public override mPoly Factory()
        {
            return mFactory;
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        public override mPoly Variable(int variable)
        {
            return mFactory.CreateMonomial(variable, 1);
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        public virtual sPoly GetUnivariateFactory()
        {
            return sFactory;
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        public virtual mPoly GetPrimitiveElement()
        {
            return primitiveElement.Clone();
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        public virtual int Degree()
        {
            return simpleExtension.Degree();
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        public virtual SimpleFieldExtension<sPoly> GetSimpleExtension()
        {
            return simpleExtension;
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        public virtual UnivariatePolynomial<mPoly> GetGeneratorMinimalPoly(int iGenerator)
        {
            return minimalPolynomialsOfGenerators[iGenerator].Clone();
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        public virtual MultipleFieldExtension<Term, mPoly, sPoly> GetSubExtension(int i)
        {
            return tower[i];
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        public virtual sPoly GetGeneratorRep(int iGenerator)
        {
            return generatorsReps[iGenerator].Clone();
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        public virtual sPoly[] GetGeneratorReps()
        {
            return generatorsReps.Clone();
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        public virtual MultipleFieldExtension<Term, mPoly, sPoly> JoinAlgebraicElement(UnivariatePolynomial<mPoly> algebraicElement)
        {
            UnivariatePolynomial<sPoly> minimalPoly = algebraicElement.MapCoefficients(simpleExtension, this.Inverse());
            MultipleFieldExtension<Term, mPoly, sPoly> ext = MkMultipleExtension0(simpleExtension.minimalPoly, minimalPoly);
            MultipleFieldExtension<Term, mPoly, sPoly>[] tower = ArraysUtil.AddAll(this.tower, this);
            UnivariatePolynomial<mPoly>[] minPolys = ArraysUtil.AddAll(this.minimalPolynomialsOfGenerators, algebraicElement);
            mPoly primitiveElement = ext.primitiveElement.InsertVariable(1, NVariables() - 1).Composition(0, this.primitiveElement.JoinNewVariable());
            SimpleFieldExtension<sPoly> simpleExtension = ext.simpleExtension;
            sPoly[] generatorsReps = Stream.Concat(Arrays.Stream(this.generatorsReps).Map((rep) => rep.Composition(simpleExtension, ext.generatorsReps[0])), Stream.Of(ext.generatorsReps[1])).ToArray(sFactory.CreateArray());
            return new MultipleFieldExtension(tower, minPolys, primitiveElement, generatorsReps, simpleExtension);
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        public virtual MultipleFieldExtension<Term, mPoly, sPoly> JoinAlgebraicElement(sPoly minimalPoly)
        {
            return JoinAlgebraicElement(minimalPoly.MapCoefficientsAsPolys(this, this.Image()));
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        public virtual MultipleFieldExtension<Term, mPoly, sPoly> JoinRedundantElement(mPoly element)
        {
            UnivariatePolynomial<mPoly> minimalPoly = UnivariatePolynomial.Create(this, Negate(element), GetOne());
            MultipleFieldExtension<Term, mPoly, sPoly>[] tower = ArraysUtil.AddAll(this.tower, this);
            UnivariatePolynomial<mPoly>[] minPolys = ArraysUtil.AddAll(this.minimalPolynomialsOfGenerators, minimalPoly);
            mPoly primitiveElement = this.primitiveElement.JoinNewVariable();
            SimpleFieldExtension<sPoly> simpleExtension = this.simpleExtension;
            sPoly[] generatorsReps = ArraysUtil.AddAll(this.generatorsReps, Inverse(element));
            return new MultipleFieldExtension(tower, minPolys, primitiveElement, generatorsReps, simpleExtension);
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        public override mPoly ValueOf(long val)
        {
            return mFactory.CreateConstant(val);
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        public override mPoly ValueOfBigInteger(BigInteger val)
        {
            return mFactory.CreateOne().MultiplyByBigInteger(val);
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        public override mPoly GetZero()
        {
            return mFactory.CreateZero();
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        public override mPoly GetOne()
        {
            return mFactory.CreateOne();
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        //    @Override
        //    public mPoly addMutable(mPoly a, mPoly b) {
        //        return a.add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtractMutable(mPoly a, mPoly b) {
        //        return a.subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negateMutable(mPoly element) {
        //        return element.negate();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly a, mPoly b) {
        //        return a.clone().add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtract(mPoly a, mPoly b) {
        //        return a.clone().subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negate(mPoly element) {
        //        return element.clone().negate();
        //    }
        //
        //    @Override
        //    public mPoly increment(mPoly element) {
        //        return element.clone().increment();
        //    }
        //
        //    @Override
        //    public mPoly decrement(mPoly element) {
        //        return element.clone().decrement();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly... elements) {
        //        return getZero().add(elements);
        //    }
        public override mPoly Copy(mPoly element)
        {
            return element.Clone();
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        //    @Override
        //    public mPoly addMutable(mPoly a, mPoly b) {
        //        return a.add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtractMutable(mPoly a, mPoly b) {
        //        return a.subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negateMutable(mPoly element) {
        //        return element.negate();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly a, mPoly b) {
        //        return a.clone().add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtract(mPoly a, mPoly b) {
        //        return a.clone().subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negate(mPoly element) {
        //        return element.clone().negate();
        //    }
        //
        //    @Override
        //    public mPoly increment(mPoly element) {
        //        return element.clone().increment();
        //    }
        //
        //    @Override
        //    public mPoly decrement(mPoly element) {
        //        return element.clone().decrement();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly... elements) {
        //        return getZero().add(elements);
        //    }
        public override bool IsZero(mPoly element)
        {
            return element.IsZero();
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        //    @Override
        //    public mPoly addMutable(mPoly a, mPoly b) {
        //        return a.add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtractMutable(mPoly a, mPoly b) {
        //        return a.subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negateMutable(mPoly element) {
        //        return element.negate();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly a, mPoly b) {
        //        return a.clone().add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtract(mPoly a, mPoly b) {
        //        return a.clone().subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negate(mPoly element) {
        //        return element.clone().negate();
        //    }
        //
        //    @Override
        //    public mPoly increment(mPoly element) {
        //        return element.clone().increment();
        //    }
        //
        //    @Override
        //    public mPoly decrement(mPoly element) {
        //        return element.clone().decrement();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly... elements) {
        //        return getZero().add(elements);
        //    }
        public override bool IsOne(mPoly element)
        {
            return element.IsOne();
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        //    @Override
        //    public mPoly addMutable(mPoly a, mPoly b) {
        //        return a.add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtractMutable(mPoly a, mPoly b) {
        //        return a.subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negateMutable(mPoly element) {
        //        return element.negate();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly a, mPoly b) {
        //        return a.clone().add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtract(mPoly a, mPoly b) {
        //        return a.clone().subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negate(mPoly element) {
        //        return element.clone().negate();
        //    }
        //
        //    @Override
        //    public mPoly increment(mPoly element) {
        //        return element.clone().increment();
        //    }
        //
        //    @Override
        //    public mPoly decrement(mPoly element) {
        //        return element.clone().decrement();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly... elements) {
        //        return getZero().add(elements);
        //    }
        public override bool IsUnit(mPoly element)
        {
            return IsField() ? !IsZero(element) : (IsOne(element) || IsMinusOne(element));
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        //    @Override
        //    public mPoly addMutable(mPoly a, mPoly b) {
        //        return a.add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtractMutable(mPoly a, mPoly b) {
        //        return a.subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negateMutable(mPoly element) {
        //        return element.negate();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly a, mPoly b) {
        //        return a.clone().add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtract(mPoly a, mPoly b) {
        //        return a.clone().subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negate(mPoly element) {
        //        return element.clone().negate();
        //    }
        //
        //    @Override
        //    public mPoly increment(mPoly element) {
        //        return element.clone().increment();
        //    }
        //
        //    @Override
        //    public mPoly decrement(mPoly element) {
        //        return element.clone().decrement();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly... elements) {
        //        return getZero().add(elements);
        //    }
        public override mPoly Gcd(mPoly a, mPoly b)
        {
            return IsField() ? a.Clone() : GetOne();
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        //    @Override
        //    public mPoly addMutable(mPoly a, mPoly b) {
        //        return a.add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtractMutable(mPoly a, mPoly b) {
        //        return a.subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negateMutable(mPoly element) {
        //        return element.negate();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly a, mPoly b) {
        //        return a.clone().add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtract(mPoly a, mPoly b) {
        //        return a.clone().subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negate(mPoly element) {
        //        return element.clone().negate();
        //    }
        //
        //    @Override
        //    public mPoly increment(mPoly element) {
        //        return element.clone().increment();
        //    }
        //
        //    @Override
        //    public mPoly decrement(mPoly element) {
        //        return element.clone().decrement();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly... elements) {
        //        return getZero().add(elements);
        //    }
        public override mPoly[] ExtendedGCD(mPoly a, mPoly b)
        {
            return base.ExtendedGCD(a, b);
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        //    @Override
        //    public mPoly addMutable(mPoly a, mPoly b) {
        //        return a.add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtractMutable(mPoly a, mPoly b) {
        //        return a.subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negateMutable(mPoly element) {
        //        return element.negate();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly a, mPoly b) {
        //        return a.clone().add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtract(mPoly a, mPoly b) {
        //        return a.clone().subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negate(mPoly element) {
        //        return element.clone().negate();
        //    }
        //
        //    @Override
        //    public mPoly increment(mPoly element) {
        //        return element.clone().increment();
        //    }
        //
        //    @Override
        //    public mPoly decrement(mPoly element) {
        //        return element.clone().decrement();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly... elements) {
        //        return getZero().add(elements);
        //    }
        public override mPoly Lcm(mPoly a, mPoly b)
        {
            return base.Lcm(a, b);
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        //    @Override
        //    public mPoly addMutable(mPoly a, mPoly b) {
        //        return a.add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtractMutable(mPoly a, mPoly b) {
        //        return a.subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negateMutable(mPoly element) {
        //        return element.negate();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly a, mPoly b) {
        //        return a.clone().add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtract(mPoly a, mPoly b) {
        //        return a.clone().subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negate(mPoly element) {
        //        return element.clone().negate();
        //    }
        //
        //    @Override
        //    public mPoly increment(mPoly element) {
        //        return element.clone().increment();
        //    }
        //
        //    @Override
        //    public mPoly decrement(mPoly element) {
        //        return element.clone().decrement();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly... elements) {
        //        return getZero().add(elements);
        //    }
        public override mPoly Gcd(params mPoly[] elements)
        {
            return base.Gcd(elements);
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        //    @Override
        //    public mPoly addMutable(mPoly a, mPoly b) {
        //        return a.add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtractMutable(mPoly a, mPoly b) {
        //        return a.subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negateMutable(mPoly element) {
        //        return element.negate();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly a, mPoly b) {
        //        return a.clone().add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtract(mPoly a, mPoly b) {
        //        return a.clone().subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negate(mPoly element) {
        //        return element.clone().negate();
        //    }
        //
        //    @Override
        //    public mPoly increment(mPoly element) {
        //        return element.clone().increment();
        //    }
        //
        //    @Override
        //    public mPoly decrement(mPoly element) {
        //        return element.clone().decrement();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly... elements) {
        //        return getZero().add(elements);
        //    }
        public override mPoly Gcd(Iterable<mPoly> elements)
        {
            return base.Gcd(elements);
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        //    @Override
        //    public mPoly addMutable(mPoly a, mPoly b) {
        //        return a.add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtractMutable(mPoly a, mPoly b) {
        //        return a.subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negateMutable(mPoly element) {
        //        return element.negate();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly a, mPoly b) {
        //        return a.clone().add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtract(mPoly a, mPoly b) {
        //        return a.clone().subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negate(mPoly element) {
        //        return element.clone().negate();
        //    }
        //
        //    @Override
        //    public mPoly increment(mPoly element) {
        //        return element.clone().increment();
        //    }
        //
        //    @Override
        //    public mPoly decrement(mPoly element) {
        //        return element.clone().decrement();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly... elements) {
        //        return getZero().add(elements);
        //    }
        public override int Signum(mPoly element)
        {
            return element.SignumOfLC();
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        //    @Override
        //    public mPoly addMutable(mPoly a, mPoly b) {
        //        return a.add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtractMutable(mPoly a, mPoly b) {
        //        return a.subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negateMutable(mPoly element) {
        //        return element.negate();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly a, mPoly b) {
        //        return a.clone().add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtract(mPoly a, mPoly b) {
        //        return a.clone().subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negate(mPoly element) {
        //        return element.clone().negate();
        //    }
        //
        //    @Override
        //    public mPoly increment(mPoly element) {
        //        return element.clone().increment();
        //    }
        //
        //    @Override
        //    public mPoly decrement(mPoly element) {
        //        return element.clone().decrement();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly... elements) {
        //        return getZero().add(elements);
        //    }
        public override mPoly Factorial(long num)
        {
            return base.Factorial(num);
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        //    @Override
        //    public mPoly addMutable(mPoly a, mPoly b) {
        //        return a.add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtractMutable(mPoly a, mPoly b) {
        //        return a.subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negateMutable(mPoly element) {
        //        return element.negate();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly a, mPoly b) {
        //        return a.clone().add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtract(mPoly a, mPoly b) {
        //        return a.clone().subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negate(mPoly element) {
        //        return element.clone().negate();
        //    }
        //
        //    @Override
        //    public mPoly increment(mPoly element) {
        //        return element.clone().increment();
        //    }
        //
        //    @Override
        //    public mPoly decrement(mPoly element) {
        //        return element.clone().decrement();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly... elements) {
        //        return getZero().add(elements);
        //    }
        public override bool Equals(object o)
        {
            if (this == o)
                return true;
            if (o == null || GetType() != o.GetType())
                return false;
            if (!base.Equals(o))
                return false;
            MultipleFieldExtension<?, ?, ?> that = (MultipleFieldExtension<?, ?, ?>)o;
            return Arrays.Equals(minimalPolynomialsOfGenerators, that.minimalPolynomialsOfGenerators);
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        //    @Override
        //    public mPoly addMutable(mPoly a, mPoly b) {
        //        return a.add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtractMutable(mPoly a, mPoly b) {
        //        return a.subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negateMutable(mPoly element) {
        //        return element.negate();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly a, mPoly b) {
        //        return a.clone().add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtract(mPoly a, mPoly b) {
        //        return a.clone().subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negate(mPoly element) {
        //        return element.clone().negate();
        //    }
        //
        //    @Override
        //    public mPoly increment(mPoly element) {
        //        return element.clone().increment();
        //    }
        //
        //    @Override
        //    public mPoly decrement(mPoly element) {
        //        return element.clone().decrement();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly... elements) {
        //        return getZero().add(elements);
        //    }
        public override int GetHashCode()
        {
            int result = base.GetHashCode();
            result = 31 * result + Arrays.GetHashCode(minimalPolynomialsOfGenerators);
            return result;
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        //    @Override
        //    public mPoly addMutable(mPoly a, mPoly b) {
        //        return a.add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtractMutable(mPoly a, mPoly b) {
        //        return a.subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negateMutable(mPoly element) {
        //        return element.negate();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly a, mPoly b) {
        //        return a.clone().add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtract(mPoly a, mPoly b) {
        //        return a.clone().subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negate(mPoly element) {
        //        return element.clone().negate();
        //    }
        //
        //    @Override
        //    public mPoly increment(mPoly element) {
        //        return element.clone().increment();
        //    }
        //
        //    @Override
        //    public mPoly decrement(mPoly element) {
        //        return element.clone().decrement();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly... elements) {
        //        return getZero().add(elements);
        //    }
        public override string ToString(IStringifier stringifier)
        {
            string cfrStr = sFactory.CoefficientRingToString(stringifier);
            string varStr = IntStream.Range(0, NVariables()).MapToObj((i) => stringifier.GetBinding(Variable(i))).Collect(Collectors.Joining(", "));
            string irrStr = IntStream.Range(0, NVariables()).MapToObj((i) =>
            {
                IUnivariatePolynomial p = minimalPolynomialsOfGenerators[i];
                string pString;
                if (stringifier is Coder)
                {
                    Dictionary bindings = stringifier.GetBindings();
                    IUnivariatePolynomial v = p.CreateMonomial(1);
                    object old = bindings.Put(v, stringifier.GetBinding(Variable(i)));
                    pString = p.ToString(stringifier);
                    if (old == null)
                        bindings.Remove(v);
                    else
                        bindings.Put(v, old);
                }
                else
                    pString = p.ToString(stringifier);
                return pString + " = 0";
            }).Collect(Collectors.Joining(", "));
            return "(" + cfrStr + ")[" + varStr + "]/<" + irrStr + ">";
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        //    @Override
        //    public mPoly addMutable(mPoly a, mPoly b) {
        //        return a.add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtractMutable(mPoly a, mPoly b) {
        //        return a.subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negateMutable(mPoly element) {
        //        return element.negate();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly a, mPoly b) {
        //        return a.clone().add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtract(mPoly a, mPoly b) {
        //        return a.clone().subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negate(mPoly element) {
        //        return element.clone().negate();
        //    }
        //
        //    @Override
        //    public mPoly increment(mPoly element) {
        //        return element.clone().increment();
        //    }
        //
        //    @Override
        //    public mPoly decrement(mPoly element) {
        //        return element.clone().decrement();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly... elements) {
        //        return getZero().add(elements);
        //    }
        public virtual string ToString(params string[] variables)
        {
            return ToString(IStringifier.MkPolyStringifier(mFactory, variables));
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        //    @Override
        //    public mPoly addMutable(mPoly a, mPoly b) {
        //        return a.add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtractMutable(mPoly a, mPoly b) {
        //        return a.subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negateMutable(mPoly element) {
        //        return element.negate();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly a, mPoly b) {
        //        return a.clone().add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtract(mPoly a, mPoly b) {
        //        return a.clone().subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negate(mPoly element) {
        //        return element.clone().negate();
        //    }
        //
        //    @Override
        //    public mPoly increment(mPoly element) {
        //        return element.clone().increment();
        //    }
        //
        //    @Override
        //    public mPoly decrement(mPoly element) {
        //        return element.clone().decrement();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly... elements) {
        //        return getZero().add(elements);
        //    }
        public override string ToString()
        {
            return ToString(IStringifier.DefaultVars(NVariables()));
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        //    @Override
        //    public mPoly addMutable(mPoly a, mPoly b) {
        //        return a.add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtractMutable(mPoly a, mPoly b) {
        //        return a.subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negateMutable(mPoly element) {
        //        return element.negate();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly a, mPoly b) {
        //        return a.clone().add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtract(mPoly a, mPoly b) {
        //        return a.clone().subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negate(mPoly element) {
        //        return element.clone().negate();
        //    }
        //
        //    @Override
        //    public mPoly increment(mPoly element) {
        //        return element.clone().increment();
        //    }
        //
        //    @Override
        //    public mPoly decrement(mPoly element) {
        //        return element.clone().decrement();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly... elements) {
        //        return getZero().add(elements);
        //    }
        class MappingFunc<Term, mPoly, sPoly> : Serializable
        {
            /// <summary>
            /// Primitive element that generates equivalent simple extension
            /// </summary>
            readonly mPoly primitiveElement;
            /// <summary>
            /// Primitive element that generates equivalent simple extension
            /// </summary>
            /// <summary>
            /// Simple field extension generated by primitive element
            /// </summary>
            readonly SimpleFieldExtension<sPoly> simpleExtension;
            /// <summary>
            /// Primitive element that generates equivalent simple extension
            /// </summary>
            /// <summary>
            /// Simple field extension generated by primitive element
            /// </summary>
            /// <summary>
            /// Generators represented as elements of simple field extension
            /// </summary>
            readonly sPoly[] generatorsReps;
            /// <summary>
            /// Primitive element that generates equivalent simple extension
            /// </summary>
            /// <summary>
            /// Simple field extension generated by primitive element
            /// </summary>
            /// <summary>
            /// Generators represented as elements of simple field extension
            /// </summary>
            MappingFunc(mPoly primitiveElement, SimpleFieldExtension<sPoly> simpleExtension, sPoly[] generatorsReps)
            {
                this.primitiveElement = primitiveElement;
                this.simpleExtension = simpleExtension;
                this.generatorsReps = generatorsReps;
            }

            /// <summary>
            /// Primitive element that generates equivalent simple extension
            /// </summary>
            /// <summary>
            /// Simple field extension generated by primitive element
            /// </summary>
            /// <summary>
            /// Generators represented as elements of simple field extension
            /// </summary>
            public virtual bool Equals(object o)
            {
                if (this == o)
                    return true;
                if (o == null || GetType() != o.GetType())
                    return false;
                MappingFunc<?, ?, ?> that = (MappingFunc<?, ?, ?>)o;
                return Objects.Equals(primitiveElement, that.primitiveElement) && Arrays.Equals(generatorsReps, that.generatorsReps);
            }

            /// <summary>
            /// Primitive element that generates equivalent simple extension
            /// </summary>
            /// <summary>
            /// Simple field extension generated by primitive element
            /// </summary>
            /// <summary>
            /// Generators represented as elements of simple field extension
            /// </summary>
            public virtual int GetHashCode()
            {
                int result = Objects.Hash(primitiveElement);
                result = 31 * result + Arrays.GetHashCode(generatorsReps);
                return result;
            }
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        //    @Override
        //    public mPoly addMutable(mPoly a, mPoly b) {
        //        return a.add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtractMutable(mPoly a, mPoly b) {
        //        return a.subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negateMutable(mPoly element) {
        //        return element.negate();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly a, mPoly b) {
        //        return a.clone().add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtract(mPoly a, mPoly b) {
        //        return a.clone().subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negate(mPoly element) {
        //        return element.clone().negate();
        //    }
        //
        //    @Override
        //    public mPoly increment(mPoly element) {
        //        return element.clone().increment();
        //    }
        //
        //    @Override
        //    public mPoly decrement(mPoly element) {
        //        return element.clone().decrement();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly... elements) {
        //        return getZero().add(elements);
        //    }
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        sealed class SimpleToMultiple<Term, mPoly, sPoly> : MappingFunc<Term, mPoly, sPoly>, Function<sPoly, mPoly>
        {
            readonly MultipleFieldExtension<Term, mPoly, sPoly>[] tower;
            readonly UnivariatePolynomial<mPoly>[] minimalPolynomials;
            public SimpleToMultiple(mPoly primitiveElement, SimpleFieldExtension<sPoly> simpleExtension, sPoly[] generatorsReps, MultipleFieldExtension<Term, mPoly, sPoly>[] tower, UnivariatePolynomial<mPoly>[] minimalPolynomials) : base(primitiveElement, simpleExtension, generatorsReps)
            {
                this.tower = tower;
                this.minimalPolynomials = minimalPolynomials;
            }

            public override mPoly Apply(sPoly sPoly)
            {
                mPoly r = (mPoly)sPoly.Composition(primitiveElement);
                if (r.nVariables > 1)
                {
                    MultipleFieldExtension<Term, mPoly, sPoly> prevExt = tower[tower.Length - 1];
                    int variable = r.nVariables - 1;
                    r = AMultivariatePolynomial.AsMultivariate(UnivariateDivision.Remainder(r.AsUnivariateEliminate(variable).SetRingUnsafe(prevExt), minimalPolynomials[variable], false), variable, true);
                }


                //            for (int i = minimalPolynomials.length - 1; i >= 0; --i) {
                //                MonomialOrder.EliminationOrder order = new MonomialOrder.EliminationOrder(MonomialOrder.LEX, i);
                //                mPoly gen = i == 0
                //                        ? AMultivariatePolynomial.asMultivariate(minimalPolynomials[i], i + 1, true).dropVariable(0).joinNewVariables(minimalPolynomials.length - i - 1)
                //                        : AMultivariatePolynomial.asMultivariate(minimalPolynomials[i], i, true).joinNewVariables(minimalPolynomials.length - i - 1);
                //                r = r.setOrdering(order);
                //                gen = gen.setOrdering(order);
                //                r = MultivariateDivision.remainder(r, gen);
                //            }
                return r;
            }
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        //    @Override
        //    public mPoly addMutable(mPoly a, mPoly b) {
        //        return a.add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtractMutable(mPoly a, mPoly b) {
        //        return a.subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negateMutable(mPoly element) {
        //        return element.negate();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly a, mPoly b) {
        //        return a.clone().add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtract(mPoly a, mPoly b) {
        //        return a.clone().subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negate(mPoly element) {
        //        return element.clone().negate();
        //    }
        //
        //    @Override
        //    public mPoly increment(mPoly element) {
        //        return element.clone().increment();
        //    }
        //
        //    @Override
        //    public mPoly decrement(mPoly element) {
        //        return element.clone().decrement();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly... elements) {
        //        return getZero().add(elements);
        //    }
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        //            for (int i = minimalPolynomials.length - 1; i >= 0; --i) {
        //                MonomialOrder.EliminationOrder order = new MonomialOrder.EliminationOrder(MonomialOrder.LEX, i);
        //                mPoly gen = i == 0
        //                        ? AMultivariatePolynomial.asMultivariate(minimalPolynomials[i], i + 1, true).dropVariable(0).joinNewVariables(minimalPolynomials.length - i - 1)
        //                        : AMultivariatePolynomial.asMultivariate(minimalPolynomials[i], i, true).joinNewVariables(minimalPolynomials.length - i - 1);
        //                r = r.setOrdering(order);
        //                gen = gen.setOrdering(order);
        //                r = MultivariateDivision.remainder(r, gen);
        //            }
        sealed class MultipleToSimple<Term, mPoly, sPoly> : MappingFunc<Term, mPoly, sPoly>, Function<mPoly, sPoly>
        {
            MultipleToSimple(mPoly primitiveElement, SimpleFieldExtension<sPoly> simpleExtension, sPoly[] generatorsReps) : base(primitiveElement, simpleExtension, generatorsReps)
            {
            }

            public override sPoly Apply(mPoly mPoly)
            {
                return mPoly.Composition(simpleExtension, generatorsReps);
            }
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        //    @Override
        //    public mPoly addMutable(mPoly a, mPoly b) {
        //        return a.add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtractMutable(mPoly a, mPoly b) {
        //        return a.subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negateMutable(mPoly element) {
        //        return element.negate();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly a, mPoly b) {
        //        return a.clone().add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtract(mPoly a, mPoly b) {
        //        return a.clone().subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negate(mPoly element) {
        //        return element.clone().negate();
        //    }
        //
        //    @Override
        //    public mPoly increment(mPoly element) {
        //        return element.clone().increment();
        //    }
        //
        //    @Override
        //    public mPoly decrement(mPoly element) {
        //        return element.clone().decrement();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly... elements) {
        //        return getZero().add(elements);
        //    }
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        //            for (int i = minimalPolynomials.length - 1; i >= 0; --i) {
        //                MonomialOrder.EliminationOrder order = new MonomialOrder.EliminationOrder(MonomialOrder.LEX, i);
        //                mPoly gen = i == 0
        //                        ? AMultivariatePolynomial.asMultivariate(minimalPolynomials[i], i + 1, true).dropVariable(0).joinNewVariables(minimalPolynomials.length - i - 1)
        //                        : AMultivariatePolynomial.asMultivariate(minimalPolynomials[i], i, true).joinNewVariables(minimalPolynomials.length - i - 1);
        //                r = r.setOrdering(order);
        //                gen = gen.setOrdering(order);
        //                r = MultivariateDivision.remainder(r, gen);
        //            }
        public static MultipleFieldExtension<Term, mPoly, sPoly> MkMultipleExtension<Term extends AMonomial<Term>, mPoly extends AMultivariatePolynomial<Term, mPoly>, sPoly extends IUnivariatePolynomial<sPoly>>(sPoly a)
        {
            return MkMultipleExtension(Rings.SimpleFieldExtension(a));
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        //    @Override
        //    public mPoly addMutable(mPoly a, mPoly b) {
        //        return a.add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtractMutable(mPoly a, mPoly b) {
        //        return a.subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negateMutable(mPoly element) {
        //        return element.negate();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly a, mPoly b) {
        //        return a.clone().add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtract(mPoly a, mPoly b) {
        //        return a.clone().subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negate(mPoly element) {
        //        return element.clone().negate();
        //    }
        //
        //    @Override
        //    public mPoly increment(mPoly element) {
        //        return element.clone().increment();
        //    }
        //
        //    @Override
        //    public mPoly decrement(mPoly element) {
        //        return element.clone().decrement();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly... elements) {
        //        return getZero().add(elements);
        //    }
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        //            for (int i = minimalPolynomials.length - 1; i >= 0; --i) {
        //                MonomialOrder.EliminationOrder order = new MonomialOrder.EliminationOrder(MonomialOrder.LEX, i);
        //                mPoly gen = i == 0
        //                        ? AMultivariatePolynomial.asMultivariate(minimalPolynomials[i], i + 1, true).dropVariable(0).joinNewVariables(minimalPolynomials.length - i - 1)
        //                        : AMultivariatePolynomial.asMultivariate(minimalPolynomials[i], i, true).joinNewVariables(minimalPolynomials.length - i - 1);
        //                r = r.setOrdering(order);
        //                gen = gen.setOrdering(order);
        //                r = MultivariateDivision.remainder(r, gen);
        //            }
        public static MultipleFieldExtension<Term, mPoly, sPoly> MkMultipleExtension<Term extends AMonomial<Term>, mPoly extends AMultivariatePolynomial<Term, mPoly>, sPoly extends IUnivariatePolynomial<sPoly>>(SimpleFieldExtension<sPoly> ext)
        {
            sPoly m = ext.GetMinimalPolynomial();
            return new MultipleFieldExtension(new MultipleFieldExtension[0], new UnivariatePolynomial[] { m.MapCoefficientsAsPolys(Rings.MultivariateRing((mPoly)m.AsMultivariate()), (cf) => (mPoly)cf.AsMultivariate()) }, (mPoly)m.AsMultivariate().CreateMonomial(0, 1), m.CreateArray(m.CreateMonomial(1)), ext);
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        //    @Override
        //    public mPoly addMutable(mPoly a, mPoly b) {
        //        return a.add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtractMutable(mPoly a, mPoly b) {
        //        return a.subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negateMutable(mPoly element) {
        //        return element.negate();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly a, mPoly b) {
        //        return a.clone().add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtract(mPoly a, mPoly b) {
        //        return a.clone().subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negate(mPoly element) {
        //        return element.clone().negate();
        //    }
        //
        //    @Override
        //    public mPoly increment(mPoly element) {
        //        return element.clone().increment();
        //    }
        //
        //    @Override
        //    public mPoly decrement(mPoly element) {
        //        return element.clone().decrement();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly... elements) {
        //        return getZero().add(elements);
        //    }
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        //            for (int i = minimalPolynomials.length - 1; i >= 0; --i) {
        //                MonomialOrder.EliminationOrder order = new MonomialOrder.EliminationOrder(MonomialOrder.LEX, i);
        //                mPoly gen = i == 0
        //                        ? AMultivariatePolynomial.asMultivariate(minimalPolynomials[i], i + 1, true).dropVariable(0).joinNewVariables(minimalPolynomials.length - i - 1)
        //                        : AMultivariatePolynomial.asMultivariate(minimalPolynomials[i], i, true).joinNewVariables(minimalPolynomials.length - i - 1);
        //                r = r.setOrdering(order);
        //                gen = gen.setOrdering(order);
        //                r = MultivariateDivision.remainder(r, gen);
        //            }
        //    /**
        //     * Creates multiple field extension {@code F(α_1, α_2)} where {@code α_1} and {@code α_2} are specified by their
        //     * minimal polynomials over F.
        //     *
        //     * <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        //     *
        //     * @param a minimal polynomial of the first algebraic number
        //     * @param b minimal polynomial of the second algebraic number
        //     */
        //    @SuppressWarnings("unchecked")
        //    public static <
        //            Term extends AMonomial<Term>,
        //            mPoly extends AMultivariatePolynomial<Term, mPoly>,
        //            sPoly extends IUnivariatePolynomial<sPoly>
        //            > MultipleFieldExtension<Term, mPoly, sPoly>
        //    mkMultipleExtension(sPoly a, sPoly b) {
        //        for (int s = 0; ; ++s) {
        //            // prepare a(x - s*y) and b(y) to compute resultant
        //            mPoly
        //                    ma = (mPoly) a.asMultivariate().setNVariables(2),
        //                    mb = (mPoly) b.asMultivariate().insertVariable(0),
        //                    factory = ma.createOne();
        //            if (s != 0)
        //                ma = ma.composition(0,
        //                        factory.createMonomial(0, 1)
        //                                .subtract(factory.createMonomial(1, 1).multiply(s)));
        //
        //            sPoly primitiveElement = (sPoly) MultivariateResultants.Resultant(ma, mb, 1).asUnivariate();
        //            if (!UnivariateSquareFreeFactorization.isSquareFree(primitiveElement))
        //                continue;
        //
        //            SimpleFieldExtension<sPoly> extension = Rings.SimpleFieldExtension(primitiveElement);
        //            UnivariatePolynomial<sPoly>
        //                    aE = a.mapCoefficientsAsPolys(extension, extension::valueOf),
        //                    bE = b.mapCoefficientsAsPolys(extension, extension::valueOf);
        //            aE = aE.composition(aE.createConstant(extension.generator()).subtract(aE.createMonomial(1).multiply(s)));
        //
        //            UnivariatePolynomial<sPoly> gcd = UnivariateGCD.PolynomialGCD(aE, bE).monic();
        //            assert gcd.degree() == 1;
        //
        //            sPoly bRep = extension.negate(gcd.cc());
        //            sPoly aRep = extension.subtract(extension.generator(), bRep.clone().multiply(s));
        //
        //            return new MultipleFieldExtension<>(a.createArray(a, b),
        //                    factory.createMonomial(0, 1).add(factory.createMonomial(1, 1).multiply(s)),
        //                    a.createArray(aRep, bRep), extension);
        //        }
        //    }
        /// <summary>
        /// Creates multiple field extension {@code F(α_1, α_2)} where {@code α_1} and {@code α_2} are specified by their
        /// minimal polynomials over F.
        /// 
        /// <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        /// </summary>
        /// <param name="a">minimal polynomial of the first algebraic number</param>
        /// <param name="b">minimal polynomial of the second algebraic number</param>
        private static MultipleFieldExtension<Term, mPoly, sPoly> MkMultipleExtension0<Term extends AMonomial<Term>, mPoly extends AMultivariatePolynomial<Term, mPoly>, sPoly extends IUnivariatePolynomial<sPoly>>(sPoly a, UnivariatePolynomial<sPoly> b)
        {
            if (a is UnivariatePolynomial)
                return (MultipleFieldExtension<Term, mPoly, sPoly>)MkMultipleExtensionE((UnivariatePolynomial)a, (UnivariatePolynomial)b);
            else
                return (MultipleFieldExtension<Term, mPoly, sPoly>)MkMultipleExtensionZp64((UnivariatePolynomialZp64)a, (UnivariatePolynomial)b);
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        //    @Override
        //    public mPoly addMutable(mPoly a, mPoly b) {
        //        return a.add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtractMutable(mPoly a, mPoly b) {
        //        return a.subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negateMutable(mPoly element) {
        //        return element.negate();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly a, mPoly b) {
        //        return a.clone().add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtract(mPoly a, mPoly b) {
        //        return a.clone().subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negate(mPoly element) {
        //        return element.clone().negate();
        //    }
        //
        //    @Override
        //    public mPoly increment(mPoly element) {
        //        return element.clone().increment();
        //    }
        //
        //    @Override
        //    public mPoly decrement(mPoly element) {
        //        return element.clone().decrement();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly... elements) {
        //        return getZero().add(elements);
        //    }
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        //            for (int i = minimalPolynomials.length - 1; i >= 0; --i) {
        //                MonomialOrder.EliminationOrder order = new MonomialOrder.EliminationOrder(MonomialOrder.LEX, i);
        //                mPoly gen = i == 0
        //                        ? AMultivariatePolynomial.asMultivariate(minimalPolynomials[i], i + 1, true).dropVariable(0).joinNewVariables(minimalPolynomials.length - i - 1)
        //                        : AMultivariatePolynomial.asMultivariate(minimalPolynomials[i], i, true).joinNewVariables(minimalPolynomials.length - i - 1);
        //                r = r.setOrdering(order);
        //                gen = gen.setOrdering(order);
        //                r = MultivariateDivision.remainder(r, gen);
        //            }
        //    /**
        //     * Creates multiple field extension {@code F(α_1, α_2)} where {@code α_1} and {@code α_2} are specified by their
        //     * minimal polynomials over F.
        //     *
        //     * <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        //     *
        //     * @param a minimal polynomial of the first algebraic number
        //     * @param b minimal polynomial of the second algebraic number
        //     */
        //    @SuppressWarnings("unchecked")
        //    public static <
        //            Term extends AMonomial<Term>,
        //            mPoly extends AMultivariatePolynomial<Term, mPoly>,
        //            sPoly extends IUnivariatePolynomial<sPoly>
        //            > MultipleFieldExtension<Term, mPoly, sPoly>
        //    mkMultipleExtension(sPoly a, sPoly b) {
        //        for (int s = 0; ; ++s) {
        //            // prepare a(x - s*y) and b(y) to compute resultant
        //            mPoly
        //                    ma = (mPoly) a.asMultivariate().setNVariables(2),
        //                    mb = (mPoly) b.asMultivariate().insertVariable(0),
        //                    factory = ma.createOne();
        //            if (s != 0)
        //                ma = ma.composition(0,
        //                        factory.createMonomial(0, 1)
        //                                .subtract(factory.createMonomial(1, 1).multiply(s)));
        //
        //            sPoly primitiveElement = (sPoly) MultivariateResultants.Resultant(ma, mb, 1).asUnivariate();
        //            if (!UnivariateSquareFreeFactorization.isSquareFree(primitiveElement))
        //                continue;
        //
        //            SimpleFieldExtension<sPoly> extension = Rings.SimpleFieldExtension(primitiveElement);
        //            UnivariatePolynomial<sPoly>
        //                    aE = a.mapCoefficientsAsPolys(extension, extension::valueOf),
        //                    bE = b.mapCoefficientsAsPolys(extension, extension::valueOf);
        //            aE = aE.composition(aE.createConstant(extension.generator()).subtract(aE.createMonomial(1).multiply(s)));
        //
        //            UnivariatePolynomial<sPoly> gcd = UnivariateGCD.PolynomialGCD(aE, bE).monic();
        //            assert gcd.degree() == 1;
        //
        //            sPoly bRep = extension.negate(gcd.cc());
        //            sPoly aRep = extension.subtract(extension.generator(), bRep.clone().multiply(s));
        //
        //            return new MultipleFieldExtension<>(a.createArray(a, b),
        //                    factory.createMonomial(0, 1).add(factory.createMonomial(1, 1).multiply(s)),
        //                    a.createArray(aRep, bRep), extension);
        //        }
        //    }
        /// <summary>
        /// Creates multiple field extension {@code F(α_1, α_2)} where {@code α_1} and {@code α_2} are specified by their
        /// minimal polynomials over F.
        /// 
        /// <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        /// </summary>
        /// <param name="a">minimal polynomial of the first algebraic number</param>
        /// <param name="b">minimal polynomial of the second algebraic number</param>
        /// <summary>
        /// Creates multiple field extension {@code F(α_1, α_2)} where {@code α_1} and {@code α_2} are specified by their
        /// minimal polynomials over F.
        /// 
        /// <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        /// </summary>
        /// <param name="a">minimal polynomial of the first algebraic number</param>
        /// <param name="b">minimal polynomial of the second algebraic number</param>
        private static MultipleFieldExtension<Monomial<E>, MultivariatePolynomial<E>, UnivariatePolynomial<E>> MkMultipleExtensionE<E>(UnivariatePolynomial<E> a, UnivariatePolynomial<UnivariatePolynomial<E>> b)
        {
            MultivariatePolynomial<E> ma = a.AsMultivariate().InsertVariable(0), factory = ma.CreateOne();
            for (int s = 0;; ++s)
            {

                // prepare a(x) and b(x, alpha) to compute resultant
                MultivariatePolynomial<E> mb = AsBivariate(b);

                // compute b(x - s*alpha, alpha)
                if (s != 0)
                    mb = mb.Composition(0, factory.CreateMonomial(0, 1).Subtract(factory.CreateMonomial(1, 1).Multiply(s)));

                // compute h(x) = Res(a(x), b(x - s*alpha, alpha), alpha)
                UnivariatePolynomial<E> primitiveElement = MultivariateResultants.Resultant(ma, mb, 1).AsUnivariate();
                if (!UnivariateSquareFreeFactorization.IsSquareFree(primitiveElement))
                    continue;

                // h(x) is the minimal polynomial of primitive element
                SimpleFieldExtension<UnivariatePolynomial<E>> extension = Rings.SimpleFieldExtension(primitiveElement);

                // compute gcd( a(X), b(gamma - s*X, X) )
                UnivariatePolynomial<UnivariatePolynomial<E>> aE = a.MapCoefficientsAsPolys(extension, extension.ValueOf()), bE = mb.MapCoefficients(extension, extension.factory.CreateConstant()).Composition(aE.CreateConstant(extension.Generator()), aE.CreateMonomial(1)), gcd = UnivariateGCD.PolynomialGCD(aE, bE).Monic();

                // representations
                UnivariatePolynomial<E> aRep = extension.Negate(gcd.Cc());
                UnivariatePolynomial<E> bRep = extension.Subtract(extension.Generator(), aRep.Clone().Multiply(s));

                // second extension
                MultipleFieldExtension<Monomial<E>, MultivariatePolynomial<E>, UnivariatePolynomial<E>> result = new MultipleFieldExtension(null, null, factory.CreateMonomial(1, 1).Add(factory.CreateMonomial(0, 1).Multiply(s)), a.CreateArray(aRep, bRep), extension);
                return result;
            }
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        //    @Override
        //    public mPoly addMutable(mPoly a, mPoly b) {
        //        return a.add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtractMutable(mPoly a, mPoly b) {
        //        return a.subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negateMutable(mPoly element) {
        //        return element.negate();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly a, mPoly b) {
        //        return a.clone().add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtract(mPoly a, mPoly b) {
        //        return a.clone().subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negate(mPoly element) {
        //        return element.clone().negate();
        //    }
        //
        //    @Override
        //    public mPoly increment(mPoly element) {
        //        return element.clone().increment();
        //    }
        //
        //    @Override
        //    public mPoly decrement(mPoly element) {
        //        return element.clone().decrement();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly... elements) {
        //        return getZero().add(elements);
        //    }
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        //            for (int i = minimalPolynomials.length - 1; i >= 0; --i) {
        //                MonomialOrder.EliminationOrder order = new MonomialOrder.EliminationOrder(MonomialOrder.LEX, i);
        //                mPoly gen = i == 0
        //                        ? AMultivariatePolynomial.asMultivariate(minimalPolynomials[i], i + 1, true).dropVariable(0).joinNewVariables(minimalPolynomials.length - i - 1)
        //                        : AMultivariatePolynomial.asMultivariate(minimalPolynomials[i], i, true).joinNewVariables(minimalPolynomials.length - i - 1);
        //                r = r.setOrdering(order);
        //                gen = gen.setOrdering(order);
        //                r = MultivariateDivision.remainder(r, gen);
        //            }
        //    /**
        //     * Creates multiple field extension {@code F(α_1, α_2)} where {@code α_1} and {@code α_2} are specified by their
        //     * minimal polynomials over F.
        //     *
        //     * <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        //     *
        //     * @param a minimal polynomial of the first algebraic number
        //     * @param b minimal polynomial of the second algebraic number
        //     */
        //    @SuppressWarnings("unchecked")
        //    public static <
        //            Term extends AMonomial<Term>,
        //            mPoly extends AMultivariatePolynomial<Term, mPoly>,
        //            sPoly extends IUnivariatePolynomial<sPoly>
        //            > MultipleFieldExtension<Term, mPoly, sPoly>
        //    mkMultipleExtension(sPoly a, sPoly b) {
        //        for (int s = 0; ; ++s) {
        //            // prepare a(x - s*y) and b(y) to compute resultant
        //            mPoly
        //                    ma = (mPoly) a.asMultivariate().setNVariables(2),
        //                    mb = (mPoly) b.asMultivariate().insertVariable(0),
        //                    factory = ma.createOne();
        //            if (s != 0)
        //                ma = ma.composition(0,
        //                        factory.createMonomial(0, 1)
        //                                .subtract(factory.createMonomial(1, 1).multiply(s)));
        //
        //            sPoly primitiveElement = (sPoly) MultivariateResultants.Resultant(ma, mb, 1).asUnivariate();
        //            if (!UnivariateSquareFreeFactorization.isSquareFree(primitiveElement))
        //                continue;
        //
        //            SimpleFieldExtension<sPoly> extension = Rings.SimpleFieldExtension(primitiveElement);
        //            UnivariatePolynomial<sPoly>
        //                    aE = a.mapCoefficientsAsPolys(extension, extension::valueOf),
        //                    bE = b.mapCoefficientsAsPolys(extension, extension::valueOf);
        //            aE = aE.composition(aE.createConstant(extension.generator()).subtract(aE.createMonomial(1).multiply(s)));
        //
        //            UnivariatePolynomial<sPoly> gcd = UnivariateGCD.PolynomialGCD(aE, bE).monic();
        //            assert gcd.degree() == 1;
        //
        //            sPoly bRep = extension.negate(gcd.cc());
        //            sPoly aRep = extension.subtract(extension.generator(), bRep.clone().multiply(s));
        //
        //            return new MultipleFieldExtension<>(a.createArray(a, b),
        //                    factory.createMonomial(0, 1).add(factory.createMonomial(1, 1).multiply(s)),
        //                    a.createArray(aRep, bRep), extension);
        //        }
        //    }
        /// <summary>
        /// Creates multiple field extension {@code F(α_1, α_2)} where {@code α_1} and {@code α_2} are specified by their
        /// minimal polynomials over F.
        /// 
        /// <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        /// </summary>
        /// <param name="a">minimal polynomial of the first algebraic number</param>
        /// <param name="b">minimal polynomial of the second algebraic number</param>
        /// <summary>
        /// Creates multiple field extension {@code F(α_1, α_2)} where {@code α_1} and {@code α_2} are specified by their
        /// minimal polynomials over F.
        /// 
        /// <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        /// </summary>
        /// <param name="a">minimal polynomial of the first algebraic number</param>
        /// <param name="b">minimal polynomial of the second algebraic number</param>
        // prepare a(x) and b(x, alpha) to compute resultant
        // compute b(x - s*alpha, alpha)
        // compute h(x) = Res(a(x), b(x - s*alpha, alpha), alpha)
        // h(x) is the minimal polynomial of primitive element
        // compute gcd( a(X), b(gamma - s*X, X) )
        // representations
        // second extension
        /// <summary>
        /// Creates multiple field extension {@code F(α_1, α_2)} where {@code α_1} and {@code α_2} are specified by their
        /// minimal polynomials over F.
        /// 
        /// <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        /// </summary>
        /// <param name="a">minimal polynomial of the first algebraic number</param>
        /// <param name="b">minimal polynomial of the second algebraic number</param>
        private static MultipleFieldExtension<MonomialZp64, MultivariatePolynomialZp64, UnivariatePolynomialZp64> MkMultipleExtensionZp64(UnivariatePolynomialZp64 a, UnivariatePolynomial<UnivariatePolynomialZp64> b)
        {
            MultivariatePolynomialZp64 ma = a.AsMultivariate().InsertVariable(0), factory = ma.CreateOne();
            for (int s = 0;; ++s)
            {

                // prepare a(x) and b(x, alpha) to compute resultant
                MultivariatePolynomialZp64 mb = AsBivariate(b);

                // compute b(x - s*alpha, alpha)
                if (s != 0)
                    mb = mb.Composition(0, factory.CreateMonomial(0, 1).Subtract(factory.CreateMonomial(1, 1).Multiply(s)));

                // compute h(x) = Res(a(x), b(x - s*alpha, alpha), alpha)
                UnivariatePolynomialZp64 primitiveElement = MultivariateResultants.Resultant(ma, mb, 1).AsUnivariate();
                if (!UnivariateSquareFreeFactorization.IsSquareFree(primitiveElement))
                    continue;

                // h(x) is the minimal polynomial of primitive element
                SimpleFieldExtension<UnivariatePolynomialZp64> extension = Rings.SimpleFieldExtension(primitiveElement);

                // compute gcd( a(X), b(gamma - s*X, X) )
                UnivariatePolynomial<UnivariatePolynomialZp64> aE = a.MapCoefficientsAsPolys(extension, extension.ValueOf()), bE = mb.MapCoefficients(extension, extension.factory.CreateConstant()).Composition(aE.CreateConstant(extension.Generator()), aE.CreateMonomial(1)), gcd = UnivariateGCD.PolynomialGCD(aE, bE).Monic();

                // representations
                UnivariatePolynomialZp64 aRep = extension.Negate(gcd.Cc());
                UnivariatePolynomialZp64 bRep = extension.Subtract(extension.Generator(), aRep.Clone().Multiply(s));
                MultipleFieldExtension<MonomialZp64, MultivariatePolynomialZp64, UnivariatePolynomialZp64> result = new MultipleFieldExtension(null, null, factory.CreateMonomial(0, 1).Add(factory.CreateMonomial(1, 1).Multiply(s)), a.CreateArray(aRep, bRep), extension);
                return result;
            }
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        //    @Override
        //    public mPoly addMutable(mPoly a, mPoly b) {
        //        return a.add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtractMutable(mPoly a, mPoly b) {
        //        return a.subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negateMutable(mPoly element) {
        //        return element.negate();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly a, mPoly b) {
        //        return a.clone().add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtract(mPoly a, mPoly b) {
        //        return a.clone().subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negate(mPoly element) {
        //        return element.clone().negate();
        //    }
        //
        //    @Override
        //    public mPoly increment(mPoly element) {
        //        return element.clone().increment();
        //    }
        //
        //    @Override
        //    public mPoly decrement(mPoly element) {
        //        return element.clone().decrement();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly... elements) {
        //        return getZero().add(elements);
        //    }
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        //            for (int i = minimalPolynomials.length - 1; i >= 0; --i) {
        //                MonomialOrder.EliminationOrder order = new MonomialOrder.EliminationOrder(MonomialOrder.LEX, i);
        //                mPoly gen = i == 0
        //                        ? AMultivariatePolynomial.asMultivariate(minimalPolynomials[i], i + 1, true).dropVariable(0).joinNewVariables(minimalPolynomials.length - i - 1)
        //                        : AMultivariatePolynomial.asMultivariate(minimalPolynomials[i], i, true).joinNewVariables(minimalPolynomials.length - i - 1);
        //                r = r.setOrdering(order);
        //                gen = gen.setOrdering(order);
        //                r = MultivariateDivision.remainder(r, gen);
        //            }
        //    /**
        //     * Creates multiple field extension {@code F(α_1, α_2)} where {@code α_1} and {@code α_2} are specified by their
        //     * minimal polynomials over F.
        //     *
        //     * <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        //     *
        //     * @param a minimal polynomial of the first algebraic number
        //     * @param b minimal polynomial of the second algebraic number
        //     */
        //    @SuppressWarnings("unchecked")
        //    public static <
        //            Term extends AMonomial<Term>,
        //            mPoly extends AMultivariatePolynomial<Term, mPoly>,
        //            sPoly extends IUnivariatePolynomial<sPoly>
        //            > MultipleFieldExtension<Term, mPoly, sPoly>
        //    mkMultipleExtension(sPoly a, sPoly b) {
        //        for (int s = 0; ; ++s) {
        //            // prepare a(x - s*y) and b(y) to compute resultant
        //            mPoly
        //                    ma = (mPoly) a.asMultivariate().setNVariables(2),
        //                    mb = (mPoly) b.asMultivariate().insertVariable(0),
        //                    factory = ma.createOne();
        //            if (s != 0)
        //                ma = ma.composition(0,
        //                        factory.createMonomial(0, 1)
        //                                .subtract(factory.createMonomial(1, 1).multiply(s)));
        //
        //            sPoly primitiveElement = (sPoly) MultivariateResultants.Resultant(ma, mb, 1).asUnivariate();
        //            if (!UnivariateSquareFreeFactorization.isSquareFree(primitiveElement))
        //                continue;
        //
        //            SimpleFieldExtension<sPoly> extension = Rings.SimpleFieldExtension(primitiveElement);
        //            UnivariatePolynomial<sPoly>
        //                    aE = a.mapCoefficientsAsPolys(extension, extension::valueOf),
        //                    bE = b.mapCoefficientsAsPolys(extension, extension::valueOf);
        //            aE = aE.composition(aE.createConstant(extension.generator()).subtract(aE.createMonomial(1).multiply(s)));
        //
        //            UnivariatePolynomial<sPoly> gcd = UnivariateGCD.PolynomialGCD(aE, bE).monic();
        //            assert gcd.degree() == 1;
        //
        //            sPoly bRep = extension.negate(gcd.cc());
        //            sPoly aRep = extension.subtract(extension.generator(), bRep.clone().multiply(s));
        //
        //            return new MultipleFieldExtension<>(a.createArray(a, b),
        //                    factory.createMonomial(0, 1).add(factory.createMonomial(1, 1).multiply(s)),
        //                    a.createArray(aRep, bRep), extension);
        //        }
        //    }
        /// <summary>
        /// Creates multiple field extension {@code F(α_1, α_2)} where {@code α_1} and {@code α_2} are specified by their
        /// minimal polynomials over F.
        /// 
        /// <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        /// </summary>
        /// <param name="a">minimal polynomial of the first algebraic number</param>
        /// <param name="b">minimal polynomial of the second algebraic number</param>
        /// <summary>
        /// Creates multiple field extension {@code F(α_1, α_2)} where {@code α_1} and {@code α_2} are specified by their
        /// minimal polynomials over F.
        /// 
        /// <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        /// </summary>
        /// <param name="a">minimal polynomial of the first algebraic number</param>
        /// <param name="b">minimal polynomial of the second algebraic number</param>
        // prepare a(x) and b(x, alpha) to compute resultant
        // compute b(x - s*alpha, alpha)
        // compute h(x) = Res(a(x), b(x - s*alpha, alpha), alpha)
        // h(x) is the minimal polynomial of primitive element
        // compute gcd( a(X), b(gamma - s*X, X) )
        // representations
        // second extension
        /// <summary>
        /// Creates multiple field extension {@code F(α_1, α_2)} where {@code α_1} and {@code α_2} are specified by their
        /// minimal polynomials over F.
        /// 
        /// <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        /// </summary>
        /// <param name="a">minimal polynomial of the first algebraic number</param>
        /// <param name="b">minimal polynomial of the second algebraic number</param>
        // prepare a(x) and b(x, alpha) to compute resultant
        // compute b(x - s*alpha, alpha)
        // compute h(x) = Res(a(x), b(x - s*alpha, alpha), alpha)
        // h(x) is the minimal polynomial of primitive element
        // compute gcd( a(X), b(gamma - s*X, X) )
        // representations
        private static mPoly AsBivariate<Term extends AMonomial<Term>, mPoly extends AMultivariatePolynomial<Term, mPoly>, sPoly extends IUnivariatePolynomial<sPoly>>(UnivariatePolynomial<sPoly> b)
        {
            if (b.Lc() is UnivariatePolynomialZp64)
                return (mPoly)AsBivariateZp64((UnivariatePolynomial)b);
            else
                return (mPoly)AsBivariateE((UnivariatePolynomial)b);
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        //    @Override
        //    public mPoly addMutable(mPoly a, mPoly b) {
        //        return a.add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtractMutable(mPoly a, mPoly b) {
        //        return a.subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negateMutable(mPoly element) {
        //        return element.negate();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly a, mPoly b) {
        //        return a.clone().add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtract(mPoly a, mPoly b) {
        //        return a.clone().subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negate(mPoly element) {
        //        return element.clone().negate();
        //    }
        //
        //    @Override
        //    public mPoly increment(mPoly element) {
        //        return element.clone().increment();
        //    }
        //
        //    @Override
        //    public mPoly decrement(mPoly element) {
        //        return element.clone().decrement();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly... elements) {
        //        return getZero().add(elements);
        //    }
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        //            for (int i = minimalPolynomials.length - 1; i >= 0; --i) {
        //                MonomialOrder.EliminationOrder order = new MonomialOrder.EliminationOrder(MonomialOrder.LEX, i);
        //                mPoly gen = i == 0
        //                        ? AMultivariatePolynomial.asMultivariate(minimalPolynomials[i], i + 1, true).dropVariable(0).joinNewVariables(minimalPolynomials.length - i - 1)
        //                        : AMultivariatePolynomial.asMultivariate(minimalPolynomials[i], i, true).joinNewVariables(minimalPolynomials.length - i - 1);
        //                r = r.setOrdering(order);
        //                gen = gen.setOrdering(order);
        //                r = MultivariateDivision.remainder(r, gen);
        //            }
        //    /**
        //     * Creates multiple field extension {@code F(α_1, α_2)} where {@code α_1} and {@code α_2} are specified by their
        //     * minimal polynomials over F.
        //     *
        //     * <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        //     *
        //     * @param a minimal polynomial of the first algebraic number
        //     * @param b minimal polynomial of the second algebraic number
        //     */
        //    @SuppressWarnings("unchecked")
        //    public static <
        //            Term extends AMonomial<Term>,
        //            mPoly extends AMultivariatePolynomial<Term, mPoly>,
        //            sPoly extends IUnivariatePolynomial<sPoly>
        //            > MultipleFieldExtension<Term, mPoly, sPoly>
        //    mkMultipleExtension(sPoly a, sPoly b) {
        //        for (int s = 0; ; ++s) {
        //            // prepare a(x - s*y) and b(y) to compute resultant
        //            mPoly
        //                    ma = (mPoly) a.asMultivariate().setNVariables(2),
        //                    mb = (mPoly) b.asMultivariate().insertVariable(0),
        //                    factory = ma.createOne();
        //            if (s != 0)
        //                ma = ma.composition(0,
        //                        factory.createMonomial(0, 1)
        //                                .subtract(factory.createMonomial(1, 1).multiply(s)));
        //
        //            sPoly primitiveElement = (sPoly) MultivariateResultants.Resultant(ma, mb, 1).asUnivariate();
        //            if (!UnivariateSquareFreeFactorization.isSquareFree(primitiveElement))
        //                continue;
        //
        //            SimpleFieldExtension<sPoly> extension = Rings.SimpleFieldExtension(primitiveElement);
        //            UnivariatePolynomial<sPoly>
        //                    aE = a.mapCoefficientsAsPolys(extension, extension::valueOf),
        //                    bE = b.mapCoefficientsAsPolys(extension, extension::valueOf);
        //            aE = aE.composition(aE.createConstant(extension.generator()).subtract(aE.createMonomial(1).multiply(s)));
        //
        //            UnivariatePolynomial<sPoly> gcd = UnivariateGCD.PolynomialGCD(aE, bE).monic();
        //            assert gcd.degree() == 1;
        //
        //            sPoly bRep = extension.negate(gcd.cc());
        //            sPoly aRep = extension.subtract(extension.generator(), bRep.clone().multiply(s));
        //
        //            return new MultipleFieldExtension<>(a.createArray(a, b),
        //                    factory.createMonomial(0, 1).add(factory.createMonomial(1, 1).multiply(s)),
        //                    a.createArray(aRep, bRep), extension);
        //        }
        //    }
        /// <summary>
        /// Creates multiple field extension {@code F(α_1, α_2)} where {@code α_1} and {@code α_2} are specified by their
        /// minimal polynomials over F.
        /// 
        /// <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        /// </summary>
        /// <param name="a">minimal polynomial of the first algebraic number</param>
        /// <param name="b">minimal polynomial of the second algebraic number</param>
        /// <summary>
        /// Creates multiple field extension {@code F(α_1, α_2)} where {@code α_1} and {@code α_2} are specified by their
        /// minimal polynomials over F.
        /// 
        /// <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        /// </summary>
        /// <param name="a">minimal polynomial of the first algebraic number</param>
        /// <param name="b">minimal polynomial of the second algebraic number</param>
        // prepare a(x) and b(x, alpha) to compute resultant
        // compute b(x - s*alpha, alpha)
        // compute h(x) = Res(a(x), b(x - s*alpha, alpha), alpha)
        // h(x) is the minimal polynomial of primitive element
        // compute gcd( a(X), b(gamma - s*X, X) )
        // representations
        // second extension
        /// <summary>
        /// Creates multiple field extension {@code F(α_1, α_2)} where {@code α_1} and {@code α_2} are specified by their
        /// minimal polynomials over F.
        /// 
        /// <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        /// </summary>
        /// <param name="a">minimal polynomial of the first algebraic number</param>
        /// <param name="b">minimal polynomial of the second algebraic number</param>
        // prepare a(x) and b(x, alpha) to compute resultant
        // compute b(x - s*alpha, alpha)
        // compute h(x) = Res(a(x), b(x - s*alpha, alpha), alpha)
        // h(x) is the minimal polynomial of primitive element
        // compute gcd( a(X), b(gamma - s*X, X) )
        // representations
        private static mPoly AsBivariateZp64<Term extends AMonomial<Term>, mPoly extends AMultivariatePolynomial<Term, mPoly>>(UnivariatePolynomial<UnivariatePolynomialZp64> b)
        {
            return (mPoly)MultivariatePolynomialZp64.AsNormalMultivariate(b.AsMultivariate(), 1);
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        //    @Override
        //    public mPoly addMutable(mPoly a, mPoly b) {
        //        return a.add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtractMutable(mPoly a, mPoly b) {
        //        return a.subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negateMutable(mPoly element) {
        //        return element.negate();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly a, mPoly b) {
        //        return a.clone().add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtract(mPoly a, mPoly b) {
        //        return a.clone().subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negate(mPoly element) {
        //        return element.clone().negate();
        //    }
        //
        //    @Override
        //    public mPoly increment(mPoly element) {
        //        return element.clone().increment();
        //    }
        //
        //    @Override
        //    public mPoly decrement(mPoly element) {
        //        return element.clone().decrement();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly... elements) {
        //        return getZero().add(elements);
        //    }
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        //            for (int i = minimalPolynomials.length - 1; i >= 0; --i) {
        //                MonomialOrder.EliminationOrder order = new MonomialOrder.EliminationOrder(MonomialOrder.LEX, i);
        //                mPoly gen = i == 0
        //                        ? AMultivariatePolynomial.asMultivariate(minimalPolynomials[i], i + 1, true).dropVariable(0).joinNewVariables(minimalPolynomials.length - i - 1)
        //                        : AMultivariatePolynomial.asMultivariate(minimalPolynomials[i], i, true).joinNewVariables(minimalPolynomials.length - i - 1);
        //                r = r.setOrdering(order);
        //                gen = gen.setOrdering(order);
        //                r = MultivariateDivision.remainder(r, gen);
        //            }
        //    /**
        //     * Creates multiple field extension {@code F(α_1, α_2)} where {@code α_1} and {@code α_2} are specified by their
        //     * minimal polynomials over F.
        //     *
        //     * <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        //     *
        //     * @param a minimal polynomial of the first algebraic number
        //     * @param b minimal polynomial of the second algebraic number
        //     */
        //    @SuppressWarnings("unchecked")
        //    public static <
        //            Term extends AMonomial<Term>,
        //            mPoly extends AMultivariatePolynomial<Term, mPoly>,
        //            sPoly extends IUnivariatePolynomial<sPoly>
        //            > MultipleFieldExtension<Term, mPoly, sPoly>
        //    mkMultipleExtension(sPoly a, sPoly b) {
        //        for (int s = 0; ; ++s) {
        //            // prepare a(x - s*y) and b(y) to compute resultant
        //            mPoly
        //                    ma = (mPoly) a.asMultivariate().setNVariables(2),
        //                    mb = (mPoly) b.asMultivariate().insertVariable(0),
        //                    factory = ma.createOne();
        //            if (s != 0)
        //                ma = ma.composition(0,
        //                        factory.createMonomial(0, 1)
        //                                .subtract(factory.createMonomial(1, 1).multiply(s)));
        //
        //            sPoly primitiveElement = (sPoly) MultivariateResultants.Resultant(ma, mb, 1).asUnivariate();
        //            if (!UnivariateSquareFreeFactorization.isSquareFree(primitiveElement))
        //                continue;
        //
        //            SimpleFieldExtension<sPoly> extension = Rings.SimpleFieldExtension(primitiveElement);
        //            UnivariatePolynomial<sPoly>
        //                    aE = a.mapCoefficientsAsPolys(extension, extension::valueOf),
        //                    bE = b.mapCoefficientsAsPolys(extension, extension::valueOf);
        //            aE = aE.composition(aE.createConstant(extension.generator()).subtract(aE.createMonomial(1).multiply(s)));
        //
        //            UnivariatePolynomial<sPoly> gcd = UnivariateGCD.PolynomialGCD(aE, bE).monic();
        //            assert gcd.degree() == 1;
        //
        //            sPoly bRep = extension.negate(gcd.cc());
        //            sPoly aRep = extension.subtract(extension.generator(), bRep.clone().multiply(s));
        //
        //            return new MultipleFieldExtension<>(a.createArray(a, b),
        //                    factory.createMonomial(0, 1).add(factory.createMonomial(1, 1).multiply(s)),
        //                    a.createArray(aRep, bRep), extension);
        //        }
        //    }
        /// <summary>
        /// Creates multiple field extension {@code F(α_1, α_2)} where {@code α_1} and {@code α_2} are specified by their
        /// minimal polynomials over F.
        /// 
        /// <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        /// </summary>
        /// <param name="a">minimal polynomial of the first algebraic number</param>
        /// <param name="b">minimal polynomial of the second algebraic number</param>
        /// <summary>
        /// Creates multiple field extension {@code F(α_1, α_2)} where {@code α_1} and {@code α_2} are specified by their
        /// minimal polynomials over F.
        /// 
        /// <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        /// </summary>
        /// <param name="a">minimal polynomial of the first algebraic number</param>
        /// <param name="b">minimal polynomial of the second algebraic number</param>
        // prepare a(x) and b(x, alpha) to compute resultant
        // compute b(x - s*alpha, alpha)
        // compute h(x) = Res(a(x), b(x - s*alpha, alpha), alpha)
        // h(x) is the minimal polynomial of primitive element
        // compute gcd( a(X), b(gamma - s*X, X) )
        // representations
        // second extension
        /// <summary>
        /// Creates multiple field extension {@code F(α_1, α_2)} where {@code α_1} and {@code α_2} are specified by their
        /// minimal polynomials over F.
        /// 
        /// <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        /// </summary>
        /// <param name="a">minimal polynomial of the first algebraic number</param>
        /// <param name="b">minimal polynomial of the second algebraic number</param>
        // prepare a(x) and b(x, alpha) to compute resultant
        // compute b(x - s*alpha, alpha)
        // compute h(x) = Res(a(x), b(x - s*alpha, alpha), alpha)
        // h(x) is the minimal polynomial of primitive element
        // compute gcd( a(X), b(gamma - s*X, X) )
        // representations
        private static mPoly AsBivariateE<Term extends AMonomial<Term>, mPoly extends AMultivariatePolynomial<Term, mPoly>, E>(UnivariatePolynomial<UnivariatePolynomial<E>> b)
        {
            return (mPoly)MultivariatePolynomial.AsNormalMultivariate(b.AsMultivariate(), 1);
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        //    @Override
        //    public mPoly addMutable(mPoly a, mPoly b) {
        //        return a.add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtractMutable(mPoly a, mPoly b) {
        //        return a.subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negateMutable(mPoly element) {
        //        return element.negate();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly a, mPoly b) {
        //        return a.clone().add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtract(mPoly a, mPoly b) {
        //        return a.clone().subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negate(mPoly element) {
        //        return element.clone().negate();
        //    }
        //
        //    @Override
        //    public mPoly increment(mPoly element) {
        //        return element.clone().increment();
        //    }
        //
        //    @Override
        //    public mPoly decrement(mPoly element) {
        //        return element.clone().decrement();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly... elements) {
        //        return getZero().add(elements);
        //    }
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        //            for (int i = minimalPolynomials.length - 1; i >= 0; --i) {
        //                MonomialOrder.EliminationOrder order = new MonomialOrder.EliminationOrder(MonomialOrder.LEX, i);
        //                mPoly gen = i == 0
        //                        ? AMultivariatePolynomial.asMultivariate(minimalPolynomials[i], i + 1, true).dropVariable(0).joinNewVariables(minimalPolynomials.length - i - 1)
        //                        : AMultivariatePolynomial.asMultivariate(minimalPolynomials[i], i, true).joinNewVariables(minimalPolynomials.length - i - 1);
        //                r = r.setOrdering(order);
        //                gen = gen.setOrdering(order);
        //                r = MultivariateDivision.remainder(r, gen);
        //            }
        //    /**
        //     * Creates multiple field extension {@code F(α_1, α_2)} where {@code α_1} and {@code α_2} are specified by their
        //     * minimal polynomials over F.
        //     *
        //     * <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        //     *
        //     * @param a minimal polynomial of the first algebraic number
        //     * @param b minimal polynomial of the second algebraic number
        //     */
        //    @SuppressWarnings("unchecked")
        //    public static <
        //            Term extends AMonomial<Term>,
        //            mPoly extends AMultivariatePolynomial<Term, mPoly>,
        //            sPoly extends IUnivariatePolynomial<sPoly>
        //            > MultipleFieldExtension<Term, mPoly, sPoly>
        //    mkMultipleExtension(sPoly a, sPoly b) {
        //        for (int s = 0; ; ++s) {
        //            // prepare a(x - s*y) and b(y) to compute resultant
        //            mPoly
        //                    ma = (mPoly) a.asMultivariate().setNVariables(2),
        //                    mb = (mPoly) b.asMultivariate().insertVariable(0),
        //                    factory = ma.createOne();
        //            if (s != 0)
        //                ma = ma.composition(0,
        //                        factory.createMonomial(0, 1)
        //                                .subtract(factory.createMonomial(1, 1).multiply(s)));
        //
        //            sPoly primitiveElement = (sPoly) MultivariateResultants.Resultant(ma, mb, 1).asUnivariate();
        //            if (!UnivariateSquareFreeFactorization.isSquareFree(primitiveElement))
        //                continue;
        //
        //            SimpleFieldExtension<sPoly> extension = Rings.SimpleFieldExtension(primitiveElement);
        //            UnivariatePolynomial<sPoly>
        //                    aE = a.mapCoefficientsAsPolys(extension, extension::valueOf),
        //                    bE = b.mapCoefficientsAsPolys(extension, extension::valueOf);
        //            aE = aE.composition(aE.createConstant(extension.generator()).subtract(aE.createMonomial(1).multiply(s)));
        //
        //            UnivariatePolynomial<sPoly> gcd = UnivariateGCD.PolynomialGCD(aE, bE).monic();
        //            assert gcd.degree() == 1;
        //
        //            sPoly bRep = extension.negate(gcd.cc());
        //            sPoly aRep = extension.subtract(extension.generator(), bRep.clone().multiply(s));
        //
        //            return new MultipleFieldExtension<>(a.createArray(a, b),
        //                    factory.createMonomial(0, 1).add(factory.createMonomial(1, 1).multiply(s)),
        //                    a.createArray(aRep, bRep), extension);
        //        }
        //    }
        /// <summary>
        /// Creates multiple field extension {@code F(α_1, α_2)} where {@code α_1} and {@code α_2} are specified by their
        /// minimal polynomials over F.
        /// 
        /// <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        /// </summary>
        /// <param name="a">minimal polynomial of the first algebraic number</param>
        /// <param name="b">minimal polynomial of the second algebraic number</param>
        /// <summary>
        /// Creates multiple field extension {@code F(α_1, α_2)} where {@code α_1} and {@code α_2} are specified by their
        /// minimal polynomials over F.
        /// 
        /// <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        /// </summary>
        /// <param name="a">minimal polynomial of the first algebraic number</param>
        /// <param name="b">minimal polynomial of the second algebraic number</param>
        // prepare a(x) and b(x, alpha) to compute resultant
        // compute b(x - s*alpha, alpha)
        // compute h(x) = Res(a(x), b(x - s*alpha, alpha), alpha)
        // h(x) is the minimal polynomial of primitive element
        // compute gcd( a(X), b(gamma - s*X, X) )
        // representations
        // second extension
        /// <summary>
        /// Creates multiple field extension {@code F(α_1, α_2)} where {@code α_1} and {@code α_2} are specified by their
        /// minimal polynomials over F.
        /// 
        /// <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        /// </summary>
        /// <param name="a">minimal polynomial of the first algebraic number</param>
        /// <param name="b">minimal polynomial of the second algebraic number</param>
        // prepare a(x) and b(x, alpha) to compute resultant
        // compute b(x - s*alpha, alpha)
        // compute h(x) = Res(a(x), b(x - s*alpha, alpha), alpha)
        // h(x) is the minimal polynomial of primitive element
        // compute gcd( a(X), b(gamma - s*X, X) )
        // representations
        /// <summary>
        /// Creates multiple field extension {@code F(α_1, α_2, ..., α_i)} where {@code α_i} are specified by their minimal
        /// polynomials over F.
        /// 
        /// <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        /// </summary>
        /// <param name="minimalPolynomials">minimal polynomials of algebraic elements</param>
        public static MultipleFieldExtension<Term, mPoly, sPoly> MkMultipleExtension<Term extends AMonomial<Term>, mPoly extends AMultivariatePolynomial<Term, mPoly>, sPoly extends IUnivariatePolynomial<sPoly>>(params sPoly[] minimalPolynomials)
        {
            MultipleFieldExtension<Term, mPoly, sPoly> ext = MkMultipleExtension(minimalPolynomials[0]);
            for (int i = 1; i < minimalPolynomials.Length; ++i)
                ext = ext.JoinAlgebraicElement(minimalPolynomials[i]);
            return ext;
        }

        /// <summary>
        /// multivariate polynomial factory
        /// </summary>
        /// <summary>
        /// univariate polynomial factory
        /// </summary>
        /// <summary>
        /// A tower of field extensions
        /// </summary>
        /// <summary>
        /// A tower of generators of multiple field extension given by their minimal polynomials
        /// </summary>
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        /// <summary>
        /// Returns the primitive element of this multiple field extension
        /// </summary>
        /// <summary>
        /// Returns the degree of this filed extension (that is the degree of primitive element)
        /// </summary>
        /// <summary>
        /// Returns the isomorphic simple field extension generated by {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns minimal polynomial corresponding to i-th generator.
        /// </summary>
        /// <summary>
        /// Returns the i-th extension from the tower
        /// </summary>
        /// <summary>
        /// Returns representation of i-th generator as element of simple field extension generated by primitive element
        /// {@link #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Returns representation of generators as elements of simple field extension generated by primitive element {@link
        /// #getPrimitiveElement()}
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        /// <summary>
        /// Adds algebraic element given by its minimal polynomial (not checked that it is irreducible) to this.
        /// </summary>
        //    @Override
        //    public mPoly valueOf(mPoly val) {
        //        return val;
        //    }
        //    @Override
        //    public mPoly addMutable(mPoly a, mPoly b) {
        //        return a.add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtractMutable(mPoly a, mPoly b) {
        //        return a.subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negateMutable(mPoly element) {
        //        return element.negate();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly a, mPoly b) {
        //        return a.clone().add(b);
        //    }
        //
        //    @Override
        //    public mPoly subtract(mPoly a, mPoly b) {
        //        return a.clone().subtract(b);
        //    }
        //
        //    @Override
        //    public mPoly negate(mPoly element) {
        //        return element.clone().negate();
        //    }
        //
        //    @Override
        //    public mPoly increment(mPoly element) {
        //        return element.clone().increment();
        //    }
        //
        //    @Override
        //    public mPoly decrement(mPoly element) {
        //        return element.clone().decrement();
        //    }
        //
        //    @Override
        //    public mPoly add(mPoly... elements) {
        //        return getZero().add(elements);
        //    }
        /// <summary>
        /// Primitive element that generates equivalent simple extension
        /// </summary>
        /// <summary>
        /// Simple field extension generated by primitive element
        /// </summary>
        /// <summary>
        /// Generators represented as elements of simple field extension
        /// </summary>
        //            for (int i = minimalPolynomials.length - 1; i >= 0; --i) {
        //                MonomialOrder.EliminationOrder order = new MonomialOrder.EliminationOrder(MonomialOrder.LEX, i);
        //                mPoly gen = i == 0
        //                        ? AMultivariatePolynomial.asMultivariate(minimalPolynomials[i], i + 1, true).dropVariable(0).joinNewVariables(minimalPolynomials.length - i - 1)
        //                        : AMultivariatePolynomial.asMultivariate(minimalPolynomials[i], i, true).joinNewVariables(minimalPolynomials.length - i - 1);
        //                r = r.setOrdering(order);
        //                gen = gen.setOrdering(order);
        //                r = MultivariateDivision.remainder(r, gen);
        //            }
        //    /**
        //     * Creates multiple field extension {@code F(α_1, α_2)} where {@code α_1} and {@code α_2} are specified by their
        //     * minimal polynomials over F.
        //     *
        //     * <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        //     *
        //     * @param a minimal polynomial of the first algebraic number
        //     * @param b minimal polynomial of the second algebraic number
        //     */
        //    @SuppressWarnings("unchecked")
        //    public static <
        //            Term extends AMonomial<Term>,
        //            mPoly extends AMultivariatePolynomial<Term, mPoly>,
        //            sPoly extends IUnivariatePolynomial<sPoly>
        //            > MultipleFieldExtension<Term, mPoly, sPoly>
        //    mkMultipleExtension(sPoly a, sPoly b) {
        //        for (int s = 0; ; ++s) {
        //            // prepare a(x - s*y) and b(y) to compute resultant
        //            mPoly
        //                    ma = (mPoly) a.asMultivariate().setNVariables(2),
        //                    mb = (mPoly) b.asMultivariate().insertVariable(0),
        //                    factory = ma.createOne();
        //            if (s != 0)
        //                ma = ma.composition(0,
        //                        factory.createMonomial(0, 1)
        //                                .subtract(factory.createMonomial(1, 1).multiply(s)));
        //
        //            sPoly primitiveElement = (sPoly) MultivariateResultants.Resultant(ma, mb, 1).asUnivariate();
        //            if (!UnivariateSquareFreeFactorization.isSquareFree(primitiveElement))
        //                continue;
        //
        //            SimpleFieldExtension<sPoly> extension = Rings.SimpleFieldExtension(primitiveElement);
        //            UnivariatePolynomial<sPoly>
        //                    aE = a.mapCoefficientsAsPolys(extension, extension::valueOf),
        //                    bE = b.mapCoefficientsAsPolys(extension, extension::valueOf);
        //            aE = aE.composition(aE.createConstant(extension.generator()).subtract(aE.createMonomial(1).multiply(s)));
        //
        //            UnivariatePolynomial<sPoly> gcd = UnivariateGCD.PolynomialGCD(aE, bE).monic();
        //            assert gcd.degree() == 1;
        //
        //            sPoly bRep = extension.negate(gcd.cc());
        //            sPoly aRep = extension.subtract(extension.generator(), bRep.clone().multiply(s));
        //
        //            return new MultipleFieldExtension<>(a.createArray(a, b),
        //                    factory.createMonomial(0, 1).add(factory.createMonomial(1, 1).multiply(s)),
        //                    a.createArray(aRep, bRep), extension);
        //        }
        //    }
        /// <summary>
        /// Creates multiple field extension {@code F(α_1, α_2)} where {@code α_1} and {@code α_2} are specified by their
        /// minimal polynomials over F.
        /// 
        /// <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        /// </summary>
        /// <param name="a">minimal polynomial of the first algebraic number</param>
        /// <param name="b">minimal polynomial of the second algebraic number</param>
        /// <summary>
        /// Creates multiple field extension {@code F(α_1, α_2)} where {@code α_1} and {@code α_2} are specified by their
        /// minimal polynomials over F.
        /// 
        /// <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        /// </summary>
        /// <param name="a">minimal polynomial of the first algebraic number</param>
        /// <param name="b">minimal polynomial of the second algebraic number</param>
        // prepare a(x) and b(x, alpha) to compute resultant
        // compute b(x - s*alpha, alpha)
        // compute h(x) = Res(a(x), b(x - s*alpha, alpha), alpha)
        // h(x) is the minimal polynomial of primitive element
        // compute gcd( a(X), b(gamma - s*X, X) )
        // representations
        // second extension
        /// <summary>
        /// Creates multiple field extension {@code F(α_1, α_2)} where {@code α_1} and {@code α_2} are specified by their
        /// minimal polynomials over F.
        /// 
        /// <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        /// </summary>
        /// <param name="a">minimal polynomial of the first algebraic number</param>
        /// <param name="b">minimal polynomial of the second algebraic number</param>
        // prepare a(x) and b(x, alpha) to compute resultant
        // compute b(x - s*alpha, alpha)
        // compute h(x) = Res(a(x), b(x - s*alpha, alpha), alpha)
        // h(x) is the minimal polynomial of primitive element
        // compute gcd( a(X), b(gamma - s*X, X) )
        // representations
        /// <summary>
        /// Creates multiple field extension {@code F(α_1, α_2, ..., α_i)} where {@code α_i} are specified by their minimal
        /// polynomials over F.
        /// 
        /// <p>NOTE: it is not tested that specified minimal polynomials are irreducible
        /// </summary>
        /// <param name="minimalPolynomials">minimal polynomials of algebraic elements</param>
        /// <summary>
        /// Constructs splitting field for a given polynomial.
        /// </summary>
        public static MultipleFieldExtension<Term, mPoly, sPoly> MkSplittingField<Term extends AMonomial<Term>, mPoly extends AMultivariatePolynomial<Term, mPoly>, sPoly extends IUnivariatePolynomial<sPoly>>(sPoly poly)
        {

            // basic extension
            MultipleFieldExtension<Term, mPoly, sPoly> extension = MkMultipleExtension(poly);
            IList<UnivariatePolynomial<mPoly>> nonLinearFactors = new List();
            nonLinearFactors.Add(poly.MapCoefficientsAsPolys(extension, extension.Image()));
            bool first = true;
            while (!nonLinearFactors.IsEmpty())
            {
                UnivariatePolynomial<mPoly> factor = nonLinearFactors.Remove(nonLinearFactors.Count - 1);
                MultipleFieldExtension<Term, mPoly, sPoly> nextExt;
                if (first)
                {
                    nextExt = extension;
                    first = false;
                }
                else
                {
                    nextExt = extension.JoinAlgebraicElement(factor);
                    MultipleFieldExtension<Term, mPoly, sPoly> _nextExt = nextExt;
                    nonLinearFactors.ReplaceAll((f) => f.MapCoefficients(_nextExt, AMultivariatePolynomial.JoinNewVariable()));
                    factor = factor.MapCoefficients(nextExt, AMultivariatePolynomial.JoinNewVariable());
                }

                factor = UnivariateDivision.DivideExact(factor, UnivariatePolynomial.Create(nextExt, nextExt.Negate(nextExt.Variable(nextExt.NVariables() - 1)), nextExt.GetOne()), false);
                IList<UnivariatePolynomial<mPoly>> factors = UnivariateFactorization.Factor(factor).factors;
                for (int i = 0; i < factors.Count; i++)
                {
                    UnivariatePolynomial<mPoly> f = factors[i];
                    if (f.Degree() > 1)
                        nonLinearFactors.Add(f);
                    else
                    {
                        nextExt = nextExt.JoinRedundantElement(nextExt.Negate(nextExt.DivideExact(f.Cc(), f.Lc())));
                        for (int j = i + 1; j < factors.Count; ++j)
                            factors[j] = factors[j].MapCoefficients(nextExt, AMultivariatePolynomial.JoinNewVariable());
                    }
                }

                extension = nextExt;
            }

            return extension;
        }
    }
}