using Cc.Redberry.Rings.Poly.Univar;
using Java.Util;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using static Cc.Redberry.Rings.Poly.RoundingMode;
using static Cc.Redberry.Rings.Poly.Associativity;
using static Cc.Redberry.Rings.Poly.Operator;
using static Cc.Redberry.Rings.Poly.TokenType;
using static Cc.Redberry.Rings.Poly.SystemInfo;

namespace Cc.Redberry.Rings.Poly
{
    /// <summary>
    /// Algebraic number field {@code F(α)} represented as a simple field extension, for details see {@link
    /// SimpleFieldExtension}.
    /// </summary>
    /// <remarks>
    /// @seeSimpleFieldExtension
    /// @seeFiniteField
    /// @seecc.redberry.rings.Rings#AlgebraicNumberField(IUnivariatePolynomial)
    /// @since2.5
    /// </remarks>
    public class AlgebraicNumberField<E> : SimpleFieldExtension<E>
    {
        /// <summary>
        /// Constructs a simple field extension {@code F(α)} generated by the algebraic number {@code α} with the specified
        /// minimal polynomial.
        /// 
        /// <p><b>NOTE:</b> irreducibility test for the minimal polynomial is not performed here, use {@link
        /// IrreduciblePolynomials#irreducibleQ(IUnivariatePolynomial)} to test irreducibility.
        /// </summary>
        /// <param name="minimalPoly">the minimal polynomial</param>
        public AlgebraicNumberField(E minimalPoly) : base(minimalPoly)
        {
            if (minimalPoly.IsOverFiniteField())
                throw new ArgumentException("Use FiniteField for constructing extensions of finite fields.");
        }

        /// <summary>
        /// Constructs a simple field extension {@code F(α)} generated by the algebraic number {@code α} with the specified
        /// minimal polynomial.
        /// 
        /// <p><b>NOTE:</b> irreducibility test for the minimal polynomial is not performed here, use {@link
        /// IrreduciblePolynomials#irreducibleQ(IUnivariatePolynomial)} to test irreducibility.
        /// </summary>
        /// <param name="minimalPoly">the minimal polynomial</param>
        public override bool IsField()
        {
            return minimalPoly.IsOverField();
        }

        /// <summary>
        /// Constructs a simple field extension {@code F(α)} generated by the algebraic number {@code α} with the specified
        /// minimal polynomial.
        /// 
        /// <p><b>NOTE:</b> irreducibility test for the minimal polynomial is not performed here, use {@link
        /// IrreduciblePolynomials#irreducibleQ(IUnivariatePolynomial)} to test irreducibility.
        /// </summary>
        /// <param name="minimalPoly">the minimal polynomial</param>
        public override bool IsUnit(E element)
        {
            return (IsField() && !IsZero(element)) || (IsOne(element) || IsMinusOne(element));
        }

        /// <summary>
        /// Constructs a simple field extension {@code F(α)} generated by the algebraic number {@code α} with the specified
        /// minimal polynomial.
        /// 
        /// <p><b>NOTE:</b> irreducibility test for the minimal polynomial is not performed here, use {@link
        /// IrreduciblePolynomials#irreducibleQ(IUnivariatePolynomial)} to test irreducibility.
        /// </summary>
        /// <param name="minimalPoly">the minimal polynomial</param>
        public override E Gcd(E a, E b)
        {

            // NOTE: don't change this
            return IsField() ? a : UnivariateGCD.PolynomialGCD(a, b);
        }

        /// <summary>
        /// Constructs a simple field extension {@code F(α)} generated by the algebraic number {@code α} with the specified
        /// minimal polynomial.
        /// 
        /// <p><b>NOTE:</b> irreducibility test for the minimal polynomial is not performed here, use {@link
        /// IrreduciblePolynomials#irreducibleQ(IUnivariatePolynomial)} to test irreducibility.
        /// </summary>
        /// <param name="minimalPoly">the minimal polynomial</param>
        // NOTE: don't change this
        public override E[] DivideAndRemainder(E a, E b)
        {
            if (IsField())
                return CreateArray(Multiply(a, Reciprocal(b)), GetZero());

            // the following code has no any particular math meaning,
            // just to make some programming things easier
            E[] cancel = Normalizer2(b);
            E cb = cancel[0];
            E bcb = cancel[1];
            E pseudoQuot = Multiply(a, cb);
            E quot = pseudoQuot.Clone().DivideByLC(bcb);
            if (quot != null)
                return CreateArray(quot, GetZero());
            return UnivariateDivision.DivideAndRemainder(a, b, true);
        }

        /// <summary>
        /// Constructs a simple field extension {@code F(α)} generated by the algebraic number {@code α} with the specified
        /// minimal polynomial.
        /// 
        /// <p><b>NOTE:</b> irreducibility test for the minimal polynomial is not performed here, use {@link
        /// IrreduciblePolynomials#irreducibleQ(IUnivariatePolynomial)} to test irreducibility.
        /// </summary>
        /// <param name="minimalPoly">the minimal polynomial</param>
        // NOTE: don't change this
        // the following code has no any particular math meaning,
        // just to make some programming things easier
        public override E Remainder(E dividend, E divider)
        {
            return DivideAndRemainder(dividend, divider)[1];
        }

        /// <summary>
        /// Constructs a simple field extension {@code F(α)} generated by the algebraic number {@code α} with the specified
        /// minimal polynomial.
        /// 
        /// <p><b>NOTE:</b> irreducibility test for the minimal polynomial is not performed here, use {@link
        /// IrreduciblePolynomials#irreducibleQ(IUnivariatePolynomial)} to test irreducibility.
        /// </summary>
        /// <param name="minimalPoly">the minimal polynomial</param>
        // NOTE: don't change this
        // the following code has no any particular math meaning,
        // just to make some programming things easier
        /// <summary>
        /// Gives an element {@code C(element)} of this field extension with the property that {@code element * C(element)}
        /// is in the base field.
        /// </summary>
        public virtual E Normalizer(E element)
        {
            return Normalizer2(element)[0];
        }

        /// <summary>
        /// Constructs a simple field extension {@code F(α)} generated by the algebraic number {@code α} with the specified
        /// minimal polynomial.
        /// 
        /// <p><b>NOTE:</b> irreducibility test for the minimal polynomial is not performed here, use {@link
        /// IrreduciblePolynomials#irreducibleQ(IUnivariatePolynomial)} to test irreducibility.
        /// </summary>
        /// <param name="minimalPoly">the minimal polynomial</param>
        // NOTE: don't change this
        // the following code has no any particular math meaning,
        // just to make some programming things easier
        /// <summary>
        /// Gives an element {@code C(element)} of this field extension with the property that {@code element * C(element)}
        /// is in the base field.
        /// </summary>
        virtual E[] Normalizer2(E element)
        {
            if (IsField())
                return CreateArray(Reciprocal(element), GetOne());
            if (element.IsZero())
                throw new ArithmeticException("divide by zero");
            if (IsOne(element))
                return CreateArray(element, GetOne());
            if (IsMinusOne(element))
                return CreateArray(element, GetOne());
            E[] xgcd = UnivariateGCD.PolynomialExtendedGCD(element, minimalPoly);
            E conjugate = xgcd[1];
            E content = conjugate.ContentAsPoly();
            return CreateArray(conjugate, xgcd[0].DivideByLC(content));
        }

        /// <summary>
        /// Constructs a simple field extension {@code F(α)} generated by the algebraic number {@code α} with the specified
        /// minimal polynomial.
        /// 
        /// <p><b>NOTE:</b> irreducibility test for the minimal polynomial is not performed here, use {@link
        /// IrreduciblePolynomials#irreducibleQ(IUnivariatePolynomial)} to test irreducibility.
        /// </summary>
        /// <param name="minimalPoly">the minimal polynomial</param>
        // NOTE: don't change this
        // the following code has no any particular math meaning,
        // just to make some programming things easier
        /// <summary>
        /// Gives an element {@code C(element)} of this field extension with the property that {@code element * C(element)}
        /// is in the base field.
        /// </summary>
        public override IEnumerator<E> Iterator()
        {
            throw new NotSupportedException("this field has infinite cardinality");
        }
    }
}